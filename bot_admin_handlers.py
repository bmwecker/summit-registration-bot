"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥ –¥–ª—è Aleph Bet Foresight Summit Bot
/admin, /stats, /sendlink, /export, /activate, /broadcast
"""

import logging
from typing import List
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from telegram.error import TelegramError

from admin import (
    get_statistics,
    get_dates_with_counts,
    get_participants_by_date,
    export_participants_to_csv,
    export_participants_by_date_to_csv,
    activate_participants_bulk,
    get_telegram_ids_by_category
)

logger = logging.getLogger(__name__)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [386965305]  # –í–∞—à ID

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ADMIN_MENU, SENDING_LINK, ACTIVATING_CODES, BROADCASTING = range(4)


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in ADMIN_IDS


async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
        [InlineKeyboardButton("üìÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ –¥–∞—Ç–∞–º", callback_data='admin_dates')],
        [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data='admin_export')],
        [InlineKeyboardButton("üîó –†–∞–∑–æ—Å–ª–∞—Ç—å Zoom-—Å—Å—ã–ª–∫—É", callback_data='admin_sendlink')],
        [InlineKeyboardButton("‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è", callback_data='admin_activate')],
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data='admin_broadcast')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def admin_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    action = query.data
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if action == 'admin_stats':
        stats = get_statistics()
        
        text = (
            "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê**\n\n"
            f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats['total']}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {stats['activated']}\n"
            f"‚è≥ –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {stats['not_activated']}\n\n"
            "**–ü–æ —è–∑—ã–∫–∞–º:**\n"
        )
        
        for lang, count in stats['by_language'].items():
            lang_name = {'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'en': 'üá¨üáß English', 'he': 'üáÆüá± ◊¢◊ë◊®◊ô◊™'}.get(lang, lang)
            text += f"{lang_name}: {count}\n"
        
        text += "\n**–ü–æ –¥–∞—Ç–∞–º:**\n"
        for date, count in sorted(stats['by_date'].items()):
            text += f"{date}: {count} —á–µ–ª.\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    
    # –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ –¥–∞—Ç–∞–º
    elif action == 'admin_dates':
        dates = get_dates_with_counts()
        
        if not dates:
            text = "üìÖ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]]
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
            return
        
        text = "üìÖ **–£–ß–ê–°–¢–ù–ò–ö–ò –ü–û –î–ê–¢–ê–ú**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:"
        keyboard = []
        
        for date_info in dates:
            date = date_info['date']
            total = date_info['total']
            activated = date_info['activated']
            
            button_text = f"{date}: {total} —á–µ–ª. (‚úÖ {activated})"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f'admin_date_{date}')])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')])
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    
    # –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –¥–∞—Ç–µ
    elif action.startswith('admin_date_'):
        date = action.replace('admin_date_', '')
        participants = get_participants_by_date(date)
        
        text = f"üìÖ **–î–∞—Ç–∞: {date}**\n\n"
        text += f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}\n"
        text += f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {sum(1 for p in participants if p.get('is_activated'))}\n\n"
        
        # –ü–æ —è–∑—ã–∫–∞–º
        by_lang = {}
        for p in participants:
            lang = p.get('language', 'ru')
            by_lang[lang] = by_lang.get(lang, 0) + 1
        
        text += "**–ü–æ —è–∑—ã–∫–∞–º:**\n"
        for lang, count in by_lang.items():
            lang_name = {'ru': 'üá∑üá∫ RU', 'en': 'üá¨üáß EN', 'he': 'üáÆüá± HE'}.get(lang, lang)
            text += f"{lang_name}: {count}\n"
        
        text += f"\nüíæ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /export_{date} –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–ø–∏—Å–∫–∞"
        
        keyboard = [
            [InlineKeyboardButton("üîó –û—Ç–ø—Ä–∞–≤–∏—Ç—å Zoom-—Å—Å—ã–ª–∫—É", callback_data=f'admin_sendlink_{date}')],
            [InlineKeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'admin_export_{date}')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_dates')]
        ]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    
    # –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    elif action == 'admin_export':
        await query.edit_message_text("üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
        
        csv_data = export_participants_to_csv()
        filename = f"participants_all_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=csv_data.getvalue().encode('utf-8-sig'),
            filename=filename,
            caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        )
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]]
        await query.message.reply_text("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!", reply_markup=InlineKeyboardMarkup(keyboard))
    
    # –≠–∫—Å–ø–æ—Ä—Ç –ø–æ –¥–∞—Ç–µ
    elif action.startswith('admin_export_'):
        date = action.replace('admin_export_', '')
        await query.edit_message_text(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –∑–∞ {date}...")
        
        csv_data = export_participants_by_date_to_csv(date)
        filename = f"participants_{date}.csv"
        
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=csv_data.getvalue().encode('utf-8-sig'),
            filename=filename,
            caption=f"üìä –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–∞ {date}"
        )
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_dates')]]
        await query.message.reply_text("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!", reply_markup=InlineKeyboardMarkup(keyboard))
    
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å Zoom-—Å—Å—ã–ª–∫—É
    elif action == 'admin_sendlink':
        dates = get_dates_with_counts()
        
        if not dates:
            text = "üìÖ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]]
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
            return
        
        text = "üîó **–†–ê–°–°–´–õ–ö–ê ZOOM-–°–°–´–õ–ö–ò**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:"
        keyboard = []
        
        for date_info in dates:
            date = date_info['date']
            total = date_info['total']
            button_text = f"{date} ({total} —á–µ–ª.)"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f'admin_sendlink_{date}')])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')])
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏
    elif action.startswith('admin_sendlink_'):
        date = action.replace('admin_sendlink_', '')
        context.user_data['sendlink_date'] = date
        
        participants = get_participants_by_date(date)
        text = (
            f"üîó **–†–∞—Å—Å—ã–ª–∫–∞ Zoom-—Å—Å—ã–ª–∫–∏ –Ω–∞ {date}**\n\n"
            f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(participants)}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ Zoom-—Å—Å—ã–ª–∫—É –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–Ω–æ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫).\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "```\n"
            "https://zoom.us/j/123456789\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á—É!\n"
            "–í—Ä–µ–º—è: 19:00 –ø–æ –ò–µ—Ä—É—Å–∞–ª–∏–º—É\n"
            "```\n\n"
            "–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        
        await query.edit_message_text(text, parse_mode='Markdown')
        context.user_data['awaiting_link'] = True
    
    # –ú–∞—Å—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è
    elif action == 'admin_activate':
        text = (
            "‚úÖ **–ú–ê–°–°–û–í–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é).\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "```\n"
            "123456\n"
            "789012\n"
            "345678\n"
            "```\n\n"
            "–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        await query.edit_message_text(text, parse_mode='Markdown')
        context.user_data['awaiting_codes'] = True
    
    # –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    elif action == 'admin_broadcast':
        keyboard = [
            [InlineKeyboardButton("üì¢ –í—Å–µ–º", callback_data='broadcast_all')],
            [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–º", callback_data='broadcast_ru')],
            [InlineKeyboardButton("üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–º", callback_data='broadcast_en')],
            [InlineKeyboardButton("üáÆüá± –ò–≤—Ä–∏—Ç—É", callback_data='broadcast_he')],
            [InlineKeyboardButton("‚úÖ –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º", callback_data='broadcast_activated')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]
        ]
        text = "üì¢ **–†–ê–°–°–´–õ–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:"
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    
    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    elif action.startswith('broadcast_'):
        category = action.replace('broadcast_', '')
        context.user_data['broadcast_category'] = category
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        if category == 'all':
            ids = get_telegram_ids_by_category()
            cat_text = "–≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"
        elif category == 'activated':
            ids = get_telegram_ids_by_category(only_activated=True)
            cat_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"
        elif category in ['ru', 'en', 'he']:
            ids = get_telegram_ids_by_category(language=category)
            lang_names = {'ru': '—Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–º', 'en': '–∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–º', 'he': '–∏–≤—Ä–∏—Ç–æ—è–∑—ã—á–Ω—ã–º'}
            cat_text = lang_names[category]
        else:
            ids = []
            cat_text = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        
        context.user_data['broadcast_ids'] = ids
        
        text = (
            f"üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ {cat_text}**\n\n"
            f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(ids)}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
            "–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        
        await query.edit_message_text(text, parse_mode='Markdown')
        context.user_data['awaiting_broadcast'] = True
    
    # –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif action == 'admin_back':
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
            [InlineKeyboardButton("üìÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ –¥–∞—Ç–∞–º", callback_data='admin_dates')],
            [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data='admin_export')],
            [InlineKeyboardButton("üîó –†–∞–∑–æ—Å–ª–∞—Ç—å Zoom-—Å—Å—ã–ª–∫—É", callback_data='admin_sendlink')],
            [InlineKeyboardButton("‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è", callback_data='admin_activate')],
            [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data='admin_broadcast')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )


async def admin_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        return
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ Zoom-—Å—Å—ã–ª–∫–∏
    if context.user_data.get('awaiting_link'):
        date = context.user_data.get('sendlink_date')
        message_text = update.message.text
        
        participants = get_participants_by_date(date)
        telegram_ids = [p['telegram_id'] for p in participants]
        
        await update.message.reply_text(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é {len(telegram_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        success = 0
        failed = 0
        
        for tid in telegram_ids:
            try:
                await context.bot.send_message(chat_id=tid, text=message_text)
                success += 1
            except TelegramError as e:
                logger.error(f"Failed to send message to {tid}: {e}")
                failed += 1
        
        await update.message.reply_text(
            f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"–£—Å–ø–µ—à–Ω–æ: {success}\n"
            f"–û—à–∏–±–æ–∫: {failed}",
            parse_mode='Markdown'
        )
        
        context.user_data['awaiting_link'] = False
        context.user_data['sendlink_date'] = None
    
    # –ú–∞—Å—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è
    elif context.user_data.get('awaiting_codes'):
        text = update.message.text
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–¥—ã
        codes = []
        for line in text.split('\n'):
            line = line.strip()
            if ',' in line:
                codes.extend([c.strip() for c in line.split(',')])
            elif line:
                codes.append(line)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ 6-–∑–Ω–∞—á–Ω—ã–µ –∫–æ–¥—ã
        valid_codes = [c for c in codes if c.isdigit() and len(c) == 6]
        
        if not valid_codes:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞.")
            return
        
        await update.message.reply_text(f"‚è≥ –ê–∫—Ç–∏–≤–∏—Ä—É—é {len(valid_codes)} –∫–æ–¥–æ–≤...")
        
        success, failed = activate_participants_bulk(valid_codes)
        
        await update.message.reply_text(
            f"‚úÖ **–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"–£—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {success}\n"
            f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ/–æ—à–∏–±–æ–∫: {failed}",
            parse_mode='Markdown'
        )
        
        context.user_data['awaiting_codes'] = False
    
    # –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    elif context.user_data.get('awaiting_broadcast'):
        message_text = update.message.text
        telegram_ids = context.user_data.get('broadcast_ids', [])
        
        if not telegram_ids:
            await update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
            return
        
        await update.message.reply_text(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é {len(telegram_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        success = 0
        failed = 0
        
        for tid in telegram_ids:
            try:
                await context.bot.send_message(chat_id=tid, text=message_text)
                success += 1
            except TelegramError as e:
                logger.error(f"Failed to send broadcast to {tid}: {e}")
                failed += 1
        
        await update.message.reply_text(
            f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"–£—Å–ø–µ—à–Ω–æ: {success}\n"
            f"–û—à–∏–±–æ–∫: {failed}",
            parse_mode='Markdown'
        )
        
        context.user_data['awaiting_broadcast'] = False
        context.user_data['broadcast_category'] = None
        context.user_data['broadcast_ids'] = None


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º datetime –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
from datetime import datetime

