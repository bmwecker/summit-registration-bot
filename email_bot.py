"""
Email-–±–æ—Ç –¥–ª—è Aleph Bet Foresight Summit
–ü–æ–ª–Ω–æ—Å—Ç—å—é –¥—É–±–ª–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª Telegram-–±–æ—Ç–∞ —á–µ—Ä–µ–∑ email
"""

import os
import imaplib
import email
from email.header import decode_header
import time
import logging
from datetime import datetime
from typing import Optional, Dict
import re

from database import Database
from languages import get_text, LANGUAGE_NAMES
from email_sender import email_sender

logger = logging.getLogger(__name__)

# IMAP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
IMAP_HOST = os.getenv("IMAP_HOST", "imap.mail.ru")
IMAP_PORT = int(os.getenv("IMAP_PORT", "993"))
IMAP_USER = os.getenv("IMAP_USER", "")
IMAP_PASSWORD = os.getenv("IMAP_PASSWORD", "")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db = Database()


class EmailBot:
    """Email-–±–æ—Ç —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º Telegram-–±–æ—Ç–∞"""
    
    def __init__(self):
        self.imap_host = IMAP_HOST
        self.imap_port = IMAP_PORT
        self.imap_user = IMAP_USER
        self.imap_password = IMAP_PASSWORD
        self.processed_emails = set()  # –ß—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–≤–∞–∂–¥—ã
    
    def is_configured(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ IMAP"""
        return bool(self.imap_user and self.imap_password)
    
    def connect_imap(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            mail = imaplib.IMAP4_SSL(self.imap_host, self.imap_port)
            mail.login(self.imap_user, self.imap_password)
            return mail
        except Exception as e:
            logger.error(f"Failed to connect to IMAP: {e}")
            return None
    
    def get_email_body(self, msg) -> str:
        """–ò–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞"""
        body = ""
        
        if msg.is_multipart():
            for part in msg.walk():
                content_type = part.get_content_type()
                if content_type == "text/plain":
                    try:
                        body = part.get_payload(decode=True).decode()
                        break
                    except:
                        pass
        else:
            try:
                body = msg.get_payload(decode=True).decode()
            except:
                pass
        
        return body.strip()
    
    def parse_command(self, text: str) -> Optional[str]:
        """–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ–∫—Å—Ç–µ –ø–∏—Å—å–º–∞"""
        text = text.lower().strip()
        
        # –ö–æ–º–∞–Ω–¥—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        if '—Å—Ç–∞—Ä—Ç' in text or '–Ω–∞—á–∞—Ç—å' in text or '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' in text:
            return 'start'
        elif '—Ä—É—Å—Å–∫–∏–π' in text or 'russian' in text:
            return 'lang_ru'
        elif '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π' in text or 'english' in text or '–∞–Ω–≥–ª' in text:
            return 'lang_en'
        elif '–∏–≤—Ä–∏—Ç' in text or 'hebrew' in text:
            return 'lang_he'
        elif '—Å–µ–≥–æ–¥–Ω—è' in text or 'today' in text:
            return 'date_today'
        elif '–∑–∞–≤—Ç—Ä–∞' in text or 'tomorrow' in text:
            return 'date_tomorrow'
        elif '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞' in text or 'day after' in text:
            return 'date_after'
        elif '–º–µ–Ω—é' in text or 'menu' in text:
            return 'menu'
        elif '–ø–æ–º–æ—â—å' in text or 'help' in text:
            return 'help'
        
        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (6 —Ü–∏—Ñ—Ä)
        code_match = re.search(r'\b\d{6}\b', text)
        if code_match:
            return f'code_{code_match.group()}'
        
        return None
    
    def send_welcome(self, to_email: str, first_name: str = ""):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
        subject = "üïäÔ∏è Aleph Bet Foresight Summit"
        body = f"""–®–∞–ª–æ–º{f', {first_name}' if first_name else ''}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é Aleph Bet Foresight Summit!

üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please choose language / ◊ë◊ó◊® ◊©◊§◊î:

–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º:
1. –†–£–°–°–ö–ò–ô (–∏–ª–∏ RU)
2. ENGLISH (–∏–ª–∏ EN)
3. ◊¢◊ë◊®◊ô◊™ (–∏–ª–∏ HE)

---

–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ Aleph Bet Foresight Summit
üïäÔ∏è
"""
        
        email_sender.send_email(to_email, subject, body)
        logger.info(f"Sent welcome email to {to_email}")
    
    def send_greeting(self, to_email: str, language: str, first_name: str = ""):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –®–ª–æ–º–æ"""
        greeting_text = get_text(language, 'greeting')
        
        subject_map = {
            'ru': "‚ú°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ Aleph Bet Summit!",
            'en': "‚ú°Ô∏è Welcome to Aleph Bet Summit!",
            'he': "‚ú°Ô∏è ◊ë◊®◊ï◊õ◊ô◊ù ◊î◊ë◊ê◊ô◊ù ◊ú-Aleph Bet Summit!"
        }
        
        # –ü–æ–ª—É—á–∞–µ–º 3 –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
        from bot import get_next_three_days, format_date_button
        dates = get_next_three_days()
        
        date_options = "\n".join([
            f"{i+1}. {format_date_button(date, language, i)}"
            for i, date in enumerate(dates)
        ])
        
        instructions_map = {
            'ru': f"\n\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ, —É–∫–∞–∑–∞–≤ –Ω–æ–º–µ—Ä –∂–µ–ª–∞–µ–º–æ–π –¥–∞—Ç—ã (1, 2 –∏–ª–∏ 3):\n\n{date_options}",
            'en': f"\n\nReply to this email with the number of your preferred date (1, 2, or 3):\n\n{date_options}",
            'he': f"\n\n◊¢◊†◊î ◊ú◊û◊ô◊ô◊ú ◊ñ◊î ◊¢◊ù ◊û◊°◊§◊® ◊î◊™◊ê◊®◊ô◊ö ◊î◊û◊ï◊¢◊ì◊£ (1, 2 ◊ê◊ï 3):\n\n{date_options}"
        }
        
        body = greeting_text + instructions_map.get(language, instructions_map['ru'])
        
        email_sender.send_email(
            to_email,
            subject_map.get(language, subject_map['ru']),
            body
        )
        logger.info(f"Sent greeting email to {to_email} in {language}")
    
    def send_confirmation(
        self,
        to_email: str,
        first_name: str,
        participant_id: int,
        activation_code: str,
        zoom_date: str,
        language: str
    ):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å ID –∏ –∫–æ–¥–æ–º"""
        email_sender.send_registration_confirmation(
            to_email,
            first_name,
            participant_id,
            activation_code,
            zoom_date,
            language
        )
        logger.info(f"Sent confirmation to {to_email}, ID: {participant_id}")
    
    def process_incoming_emails(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º"""
        if not self.is_configured():
            logger.warning("IMAP not configured")
            return
        
        mail = self.connect_imap()
        if not mail:
            return
        
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É –≤—Ö–æ–¥—è—â–∏—Ö
            mail.select('INBOX')
            
            # –ò—â–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
            status, messages = mail.search(None, 'UNSEEN')
            
            if status != 'OK':
                return
            
            email_ids = messages[0].split()
            
            for email_id in email_ids:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–æ
                    status, msg_data = mail.fetch(email_id, '(RFC822)')
                    
                    if status != 'OK':
                        continue
                    
                    # –ü–∞—Ä—Å–∏–º –ø–∏—Å—å–º–æ
                    msg = email.message_from_bytes(msg_data[0][1])
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                    from_email = msg.get('From')
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—ã–π email
                    from_match = re.search(r'[\w\.-]+@[\w\.-]+', from_email)
                    if from_match:
                        from_email = from_match.group()
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É
                    subject = decode_header(msg.get('Subject', ''))[0][0]
                    if isinstance(subject, bytes):
                        subject = subject.decode()
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
                    body = self.get_email_body(msg)
                    
                    logger.info(f"Processing email from {from_email}: {body[:50]}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
                    self.process_email_command(from_email, body, subject)
                    
                except Exception as e:
                    logger.error(f"Error processing email {email_id}: {e}")
                    continue
        
        finally:
            mail.close()
            mail.logout()
    
    def process_email_command(self, from_email: str, body: str, subject: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –ø–∏—Å—å–º–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
        user = self.get_user_by_email(from_email)
        
        command = self.parse_command(body)
        
        if not command:
            # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–º–æ—â—å
            self.send_help(from_email, user.get('language', 'ru') if user else 'ru')
            return
        
        # –ö–æ–º–∞–Ω–¥–∞ START
        if command == 'start':
            if user:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å
                self.send_menu(from_email, user)
            else:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                self.send_welcome(from_email)
            return
        
        # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
        if command.startswith('lang_'):
            language = command.split('_')[1]
            
            if user:
                # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫
                db.set_user_language(user['telegram_id'], language)
                self.send_menu(from_email, user)
            else:
                # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Ä–µ–º–µ–Ω–Ω–æ –±–µ–∑ ID)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º email –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                first_name = from_email.split('@')[0]
                self.send_greeting(from_email, language, first_name)
            return
        
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã, –º–µ–Ω—é –∏ —Ç.–¥.
    
    def get_user_by_email(self, email: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email"""
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ email –≤ database.py
        return None
    
    def send_help(self, to_email: str, language: str = 'ru'):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_texts = {
            'ru': """üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ Email-–±–æ—Ç—É

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –ø–∏—Å—å–º–∞ —ç—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏):

‚Ä¢ –°–¢–ê–†–¢ - –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
‚Ä¢ –†–£–°–°–ö–ò–ô / ENGLISH / ◊¢◊ë◊®◊ô◊™ - –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
‚Ä¢ –ú–ï–ù–Æ - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ –ü–û–ú–û–©–¨ - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø–∏—Å—å–º–∞, —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
Aleph Bet Foresight Summit
""",
            'en': """üìñ Email Bot Help

Available commands (reply to emails with these words):

‚Ä¢ START - begin registration
‚Ä¢ RUSSIAN / ENGLISH / HEBREW - choose language
‚Ä¢ MENU - main menu
‚Ä¢ HELP - this help

You can also simply reply to emails following the instructions.

Best regards,
Aleph Bet Foresight Summit
""",
            'he': """üìñ ◊¢◊ñ◊®◊î ◊¢◊ë◊ï◊® Email ◊ë◊ï◊ò

◊§◊ß◊ï◊ì◊ï◊™ ◊ñ◊û◊ô◊†◊ï◊™ (◊î◊©◊ë ◊ú◊û◊ô◊ô◊ú◊ô◊ù ◊¢◊ù ◊î◊û◊ô◊ú◊ô◊ù ◊î◊ë◊ê◊ï◊™):

‚Ä¢ START - ◊î◊™◊ó◊ú ◊®◊ô◊©◊ï◊ù
‚Ä¢ RUSSIAN / ENGLISH / HEBREW - ◊ë◊ó◊® ◊©◊§◊î
‚Ä¢ MENU - ◊™◊§◊®◊ô◊ò ◊®◊ê◊©◊ô
‚Ä¢ HELP - ◊¢◊ñ◊®◊î ◊ñ◊ï

◊ê◊™◊î ◊ô◊õ◊ï◊ú ◊í◊ù ◊§◊©◊ï◊ò ◊ú◊î◊©◊ô◊ë ◊ú◊û◊ô◊ô◊ú◊ô◊ù ◊ë◊¢◊ß◊ë◊ï◊™ ◊î◊î◊ï◊®◊ê◊ï◊™.

◊ë◊ë◊®◊õ◊î,
Aleph Bet Foresight Summit
"""
        }
        
        email_sender.send_email(
            to_email,
            "üìñ –°–ø—Ä–∞–≤–∫–∞ / Help / ◊¢◊ñ◊®◊î",
            help_texts.get(language, help_texts['ru'])
        )
    
    def send_menu(self, to_email: str, user: Dict):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        language = user.get('language', 'ru')
        
        menu_texts = {
            'ru': f"""üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í–∞—à ID: ‚Ññ{user.get('participant_id', 'N/A')}
–í–∞—à –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {user.get('activation_code', 'N/A')}
–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏: {user.get('zoom_date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
1. ID - –Ω–∞–ø–æ–º–Ω–∏—Ç—å ID
2. –ö–û–î - –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
3. –î–ê–¢–ê - –Ω–∞–ø–æ–º–Ω–∏—Ç—å –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏
4. –ò–ù–°–¢–†–£–ö–¶–ò–Ø - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ Zoom
5. –ü–û–ú–û–©–¨ - —Å–ø—Ä–∞–≤–∫–∞

–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ —Å –Ω—É–∂–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π.
""",
            'en': f"""üì± Main Menu

Your ID: ‚Ññ{user.get('participant_id', 'N/A')}
Your activation code: {user.get('activation_code', 'N/A')}
Meeting date: {user.get('zoom_date', 'not set')}

Available commands:
1. ID - remind my ID
2. CODE - remind activation code
3. DATE - remind meeting date
4. INSTRUCTION - Zoom instruction
5. HELP - help

Reply to this email with the needed command.
""",
            'he': f"""üì± ◊™◊§◊®◊ô◊ò ◊®◊ê◊©◊ô

◊î-ID ◊©◊ú◊ö: ‚Ññ{user.get('participant_id', 'N/A')}
◊ß◊ï◊ì ◊î◊î◊§◊¢◊ú◊î ◊©◊ú◊ö: {user.get('activation_code', 'N/A')}
◊™◊ê◊®◊ô◊ö ◊î◊§◊í◊ô◊©◊î: {user.get('zoom_date', '◊ú◊ê ◊†◊ß◊ë◊¢')}

◊§◊ß◊ï◊ì◊ï◊™ ◊ñ◊û◊ô◊†◊ï◊™:
1. ID - ◊ú◊î◊ñ◊õ◊ô◊® ID
2. CODE - ◊ú◊î◊ñ◊õ◊ô◊® ◊ß◊ï◊ì ◊î◊§◊¢◊ú◊î
3. DATE - ◊ú◊î◊ñ◊õ◊ô◊® ◊™◊ê◊®◊ô◊ö ◊§◊í◊ô◊©◊î
4. INSTRUCTION - ◊î◊ï◊®◊ê◊ï◊™ Zoom
5. HELP - ◊¢◊ñ◊®◊î

◊î◊©◊ë ◊ú◊û◊ô◊ô◊ú ◊ñ◊î ◊¢◊ù ◊î◊§◊ß◊ï◊ì◊î ◊î◊†◊ì◊®◊©◊™.
"""
        }
        
        email_sender.send_email(
            to_email,
            get_text(language, 'main_menu'),
            menu_texts.get(language, menu_texts['ru'])
        )
    
    def run(self, interval: int = 60):
        """–ó–∞–ø—É—Å–∫ email-–±–æ—Ç–∞ –≤ —Ü–∏–∫–ª–µ"""
        logger.info("Email bot started")
        
        while True:
            try:
                self.process_incoming_emails()
                time.sleep(interval)
            except KeyboardInterrupt:
                logger.info("Email bot stopped by user")
                break
            except Exception as e:
                logger.error(f"Error in email bot loop: {e}")
                time.sleep(interval)


def start_email_bot():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å email-–±–æ—Ç–∞"""
    bot = EmailBot()
    
    if not bot.is_configured():
        logger.warning("Email bot not configured (missing IMAP settings)")
        return
    
    logger.info("Starting email bot...")
    bot.run()


if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    
    start_email_bot()

