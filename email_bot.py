"""
Email-–±–æ—Ç –¥–ª—è Aleph Bet Foresight Summit
–ü–æ–ª–Ω–æ—Å—Ç—å—é –¥—É–±–ª–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª Telegram/WhatsApp-–±–æ—Ç–∞ —á–µ—Ä–µ–∑ email
"""

import os
import imaplib
import email
from email.header import decode_header
import time
import logging
from datetime import datetime, timedelta
from typing import Optional, Dict
import re
import hashlib

from database import Database
from email_sender import email_sender

logger = logging.getLogger(__name__)

# IMAP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
IMAP_HOST = os.getenv("IMAP_HOST", "imap.mail.ru")
IMAP_PORT = int(os.getenv("IMAP_PORT", "993"))
IMAP_USER = os.getenv("IMAP_USER", "")
IMAP_PASSWORD = os.getenv("IMAP_PASSWORD", "")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_PARTICIPANTS_PER_DATE = 290

# –¢–µ–∫—Å—Ç—ã –¢–û–ß–ù–û –∫–∞–∫ –≤ WhatsApp –±–æ—Ç–µ
TEXTS = {
    'ru': {
        'welcome': 'üïäÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! Welcome! ◊ë◊®◊ï◊õ◊ô◊ù ◊î◊ë◊ê◊ô◊ù!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please choose language / ◊ë◊ó◊® ◊©◊§◊î:\n\n1Ô∏è‚É£ –†—É—Å—Å–∫–∏–π üá∑üá∫\n2Ô∏è‚É£ English üá¨üáß\n3Ô∏è‚É£ ◊¢◊ë◊®◊ô◊™ üáÆüá±\n\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ —Ü–∏—Ñ—Ä–æ–π –∏–ª–∏ —Å–ª–æ–≤–æ–º (RU/EN/HE)',
        'greeting': '‚ú°Ô∏è –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ‚Äî –≤—ã —Å–æ —Å–≤–æ–∏–º –Ω–∞—Ä–æ–¥–æ–º!\n–®–∞–ª–æ–º! –ú–µ–Ω—è –∑–æ–≤—É—Ç –®–ª–æ–º–æ\n\nüéâ –í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –Ω–∞ Zoom-–≤—Å—Ç—Ä–µ—á—É —Å –æ—Ä–≥–∫–æ–º–∏—Ç–µ—Ç–æ–º –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏. –¢–∞–∫–∂–µ –Ω–∞ –Ω–µ–π, –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç—É –º–∏—Å—Å–∏—é, –∫–æ—Ç–æ—Ä–∞—è –í–∞–º –ø–æ –¥—É—à–µ!\n\n–ö–æ–≥–¥–∞ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ ZOOM –≤—Å—Ç—Ä–µ—á–µ? –°–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞?',
        'choose_date': 'üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –¥–ª—è Zoom-–≤—Å—Ç—Ä–µ—á–∏:',
        'date_full': '‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –≤—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.',
        'meeting_confirmed': '–û—Ç–ª–∏—á–Ω–æ! –ú—ã –±—É–¥–µ–º –æ—á–µ–Ω—å —Ä–∞–¥—ã –í–∞—Å –≤–∏–¥–µ—Ç—å –Ω–∞ –Ω–∞—à–µ–π –ø–µ—Ä–≤–æ–π –≤—Å—Ç—Ä–µ—á–µ!',
        'id_and_code': 'üé´ –í–∞—à ID: ‚Ññ{participant_id}\nüì≤ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ID: {activation_code}\n\n‚ö†Ô∏è –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –í–∞—à–µ–≥–æ ID –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ Zoom-–≤—Å—Ç—Ä–µ—á–µ.\n–ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º—É —É—á–∞—Å—Ç–∏—è –≤ —Å–∞–º–º–∏—Ç–µ.',
        'main_menu': 'üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n\n1Ô∏è‚É£ –ù–∞–ø–æ–º–Ω–∏—Ç—å –Ω–æ–º–µ—Ä ID\n2Ô∏è‚É£ –ù–∞–ø–æ–º–Ω–∏—Ç—å –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏\n3Ô∏è‚É£ –ù–∞–ø–æ–º–Ω–∏—Ç—å –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏\n4Ô∏è‚É£ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É\n5Ô∏è‚É£ –ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ID?\n6Ô∏è‚É£ –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫\n\n_–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä–æ–º (1-6) –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π (MENU, HELP)_',
        'your_id': 'üìú –í–∞—à ID: ‚Ññ{participant_id}',
        'your_code': 'üîë –í–∞—à –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {activation_code}',
        'your_date': 'üìÖ –í–∞—à–∞ –¥–∞—Ç–∞ Zoom-–≤—Å—Ç—Ä–µ—á–∏: {zoom_date}',
        'how_to_activate': '‚ùì –ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ID?\n\n–í –¥–µ–Ω—å ZOOM –≤—Å—Ç—Ä–µ—á–∏, –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–Ω–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á—É, –∏ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –µ—ë –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –í—ã –¥–æ–ª–∂–Ω—ã –±—É–¥–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ –æ–±—â–∏–π —á–∞—Ç.\n\n–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é ZOOM –≤—Å—Ç—Ä–µ—á–∏ –í–∞—à ID –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.',
        'help': 'üìñ –°–ø—Ä–∞–≤–∫–∞\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n‚Ä¢ START - –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n‚Ä¢ MENU - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n‚Ä¢ 1-6 - –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é\n‚Ä¢ HELP - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞',
        'today': '–°–µ–≥–æ–¥–Ω—è',
        'tomorrow': '–ó–∞–≤—Ç—Ä–∞',
        'day_after_tomorrow': '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞'
    },
    'en': {
        'welcome': 'üïäÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! Welcome! ◊ë◊®◊ï◊õ◊ô◊ù ◊î◊ë◊ê◊ô◊ù!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please choose language / ◊ë◊ó◊® ◊©◊§◊î:\n\n1Ô∏è‚É£ –†—É—Å—Å–∫–∏–π üá∑üá∫\n2Ô∏è‚É£ English üá¨üáß\n3Ô∏è‚É£ ◊¢◊ë◊®◊ô◊™ üáÆüá±\n\nReply with number or word (RU/EN/HE)',
        'greeting': '‚ú°Ô∏è Congratulations ‚Äî you are with your people!\nShalom! My name is Shlomo\n\nüéâ You are invited to a Zoom meeting with the organizing committee to meet the organizers. You will also be able to choose the mission that suits you!\n\nWhen would you like to join the ZOOM meeting? Today, tomorrow, or the day after tomorrow?',
        'choose_date': 'üìÖ Choose a convenient date for the Zoom meeting:',
        'date_full': '‚ùå Unfortunately, all places for this date are taken. Please choose another date.',
        'meeting_confirmed': 'Great! We will be very happy to see you at our first meeting!',
        'id_and_code': 'üé´ Your ID: ‚Ññ{participant_id}\nüì≤ Unique activation code: {activation_code}\n\n‚ö†Ô∏è You must attend the Zoom meeting to activate your ID.\nAfter activation, you can choose your form of participation in the summit.',
        'main_menu': 'üì± Main menu:\n\n1Ô∏è‚É£ Remind ID number\n2Ô∏è‚É£ Remind activation code\n3Ô∏è‚É£ Remind meeting date\n4Ô∏è‚É£ Reschedule meeting\n5Ô∏è‚É£ How to activate ID?\n6Ô∏è‚É£ Change language\n\n_Reply with number (1-6) or command (MENU, HELP)_',
        'your_id': 'üìú Your ID: ‚Ññ{participant_id}',
        'your_code': 'üîë Your activation code: {activation_code}',
        'your_date': 'üìÖ Your Zoom meeting date: {zoom_date}',
        'how_to_activate': '‚ùì How to activate ID?\n\nOn the day of the ZOOM meeting, you will receive a link to the online meeting and the exact time it will take place. You must send your unique code to the general chat.\n\nAfter the ZOOM meeting is over, your ID will be activated.',
        'help': 'üìñ Help\n\nAvailable commands:\n‚Ä¢ START - start registration\n‚Ä¢ MENU - main menu\n‚Ä¢ 1-6 - select menu item\n‚Ä¢ HELP - this help',
        'today': 'Today',
        'tomorrow': 'Tomorrow',
        'day_after_tomorrow': 'Day after tomorrow'
    },
    'he': {
        'welcome': 'üïäÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! Welcome! ◊ë◊®◊ï◊õ◊ô◊ù ◊î◊ë◊ê◊ô◊ù!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please choose language / ◊ë◊ó◊® ◊©◊§◊î:\n\n1Ô∏è‚É£ –†—É—Å—Å–∫–∏–π üá∑üá∫\n2Ô∏è‚É£ English üá¨üáß\n3Ô∏è‚É£ ◊¢◊ë◊®◊ô◊™ üáÆüá±\n\n(HE/EN/RU) ◊¢◊†◊î ◊¢◊ù ◊û◊°◊§◊® ◊ê◊ï ◊û◊ô◊ú◊î',
        'greeting': '‚ú°Ô∏è !◊ë◊®◊ï◊õ◊ô◊ù ◊î◊ë◊ê◊ô◊ù ‚Äî ◊ê◊™◊ù ◊¢◊ù ◊î◊¢◊ù ◊©◊ú◊õ◊ù\n!◊©◊ú◊ï◊ù! ◊©◊û◊ô ◊©◊ú◊û◊î\n\nüéâ ◊ê◊™◊ù ◊û◊ï◊ñ◊û◊†◊ô◊ù ◊ú◊§◊í◊ô◊©◊™ Zoom ◊¢◊ù ◊î◊ï◊ï◊¢◊ì◊î ◊î◊û◊ê◊®◊í◊†◊™ ◊õ◊ì◊ô ◊ú◊î◊õ◊ô◊® ◊ê◊™ ◊î◊û◊ê◊®◊í◊†◊ô◊ù. ◊™◊ï◊õ◊ú◊ï ◊í◊ù ◊ú◊ë◊ó◊ï◊® ◊ê◊™ ◊î◊û◊©◊ô◊û◊î ◊î◊û◊™◊ê◊ô◊û◊î ◊ú◊õ◊ù!\n\n◊û◊™◊ô ◊™◊®◊¶◊ï ◊ú◊î◊¶◊ò◊®◊£ ◊ú◊§◊í◊ô◊©◊™ ZOOM? ◊î◊ô◊ï◊ù, ◊û◊ó◊® ◊ê◊ï ◊û◊ó◊®◊™◊ô◊ô◊ù?',
        'choose_date': 'üìÖ :◊ë◊ó◊®◊ï ◊™◊ê◊®◊ô◊ö ◊†◊ï◊ó ◊ú◊§◊í◊ô◊©◊™ Zoom',
        'date_full': '‚ùå ◊ú◊û◊®◊ë◊î ◊î◊¶◊¢◊®, ◊õ◊ú ◊î◊û◊ß◊ï◊û◊ï◊™ ◊ú◊™◊ê◊®◊ô◊ö ◊ñ◊î ◊™◊§◊ï◊°◊ô◊ù. ◊ê◊†◊ê ◊ë◊ó◊®◊ï ◊™◊ê◊®◊ô◊ö ◊ê◊ó◊®.',
        'meeting_confirmed': '!◊û◊¶◊ï◊ô◊ü! ◊†◊©◊û◊ó ◊û◊ê◊ï◊ì ◊ú◊®◊ê◊ï◊™◊õ◊ù ◊ë◊§◊í◊ô◊©◊î ◊î◊®◊ê◊©◊ï◊†◊î ◊©◊ú◊†◊ï',
        'id_and_code': 'üé´ ◊î-ID ◊©◊ú◊ö: ‚Ññ{participant_id}\nüì≤ :◊ß◊ï◊ì ◊î◊§◊¢◊ú◊î ◊ô◊ô◊ó◊ï◊ì◊ô {activation_code}\n\n‚ö†Ô∏è ◊¢◊ú◊ô◊ö ◊ú◊î◊©◊™◊™◊£ ◊ë◊§◊í◊ô◊©◊™ Zoom ◊õ◊ì◊ô ◊ú◊î◊§◊¢◊ô◊ú ◊ê◊™ ◊î-ID ◊©◊ú◊ö.\n.◊ú◊ê◊ó◊® ◊î◊î◊§◊¢◊ú◊î, ◊™◊ï◊õ◊ú ◊ú◊ë◊ó◊ï◊® ◊ê◊™ ◊¶◊ï◊®◊™ ◊î◊î◊©◊™◊™◊§◊ï◊™ ◊©◊ú◊ö ◊ë◊§◊°◊í◊î',
        'main_menu': 'üì± :◊™◊§◊®◊ô◊ò ◊®◊ê◊©◊ô\n\n1Ô∏è‚É£ ◊î◊ñ◊õ◊® ◊û◊°◊§◊® ID\n2Ô∏è‚É£ ◊î◊ñ◊õ◊® ◊ß◊ï◊ì ◊î◊§◊¢◊ú◊î\n3Ô∏è‚É£ ◊î◊ñ◊õ◊® ◊™◊ê◊®◊ô◊ö ◊§◊í◊ô◊©◊î\n4Ô∏è‚É£ ◊ß◊ë◊¢ ◊û◊ó◊ì◊© ◊§◊í◊ô◊©◊î\n5Ô∏è‚É£ ?◊õ◊ô◊¶◊ì ◊ú◊î◊§◊¢◊ô◊ú ID\n6Ô∏è‚É£ ◊©◊†◊î ◊©◊§◊î\n\n_(MENU ,HELP) ◊¢◊†◊î ◊ë◊û◊°◊§◊® (1-6) ◊ê◊ï ◊§◊ß◊ï◊ì◊î_',
        'your_id': 'üìú ◊î-ID ◊©◊ú◊ö: ‚Ññ{participant_id}',
        'your_code': 'üîë ◊ß◊ï◊ì ◊î◊î◊§◊¢◊ú◊î ◊©◊ú◊ö: {activation_code}',
        'your_date': 'üìÖ ◊™◊ê◊®◊ô◊ö ◊§◊í◊ô◊©◊™ Zoom ◊©◊ú◊ö: {zoom_date}',
        'how_to_activate': '‚ùì ?◊õ◊ô◊¶◊ì ◊ú◊î◊§◊¢◊ô◊ú ID\n\n◊ë◊ô◊ï◊ù ◊§◊í◊ô◊©◊™ ZOOM, ◊™◊ß◊ë◊ú ◊ß◊ô◊©◊ï◊® ◊ú◊§◊í◊ô◊©◊î ◊î◊û◊ß◊ï◊ï◊†◊™ ◊ï◊î◊©◊¢◊î ◊î◊û◊ì◊ï◊ô◊ß◊™ ◊©◊ë◊î ◊î◊ô◊ê ◊™◊™◊ß◊ô◊ô◊ù. ◊¢◊ú◊ô◊ö ◊ú◊©◊ú◊ï◊ó ◊ê◊™ ◊î◊ß◊ï◊ì ◊î◊ô◊ô◊ó◊ï◊ì◊ô ◊©◊ú◊ö ◊ú◊¶\'◊ê◊ò ◊î◊õ◊ú◊ú◊ô.\n\n.◊ë◊™◊ï◊ù ◊§◊í◊ô◊©◊™ ZOOM, ◊î-ID ◊©◊ú◊ö ◊ô◊ï◊§◊¢◊ú',
        'help': 'üìñ ◊¢◊ñ◊®◊î\n\n:◊§◊ß◊ï◊ì◊ï◊™ ◊ñ◊û◊ô◊†◊ï◊™\n‚Ä¢ START - ◊î◊™◊ó◊ú ◊®◊ô◊©◊ï◊ù\n‚Ä¢ MENU - ◊™◊§◊®◊ô◊ò ◊®◊ê◊©◊ô\n‚Ä¢ 1-6 - ◊ë◊ó◊® ◊§◊®◊ô◊ò ◊™◊§◊®◊ô◊ò\n‚Ä¢ HELP - ◊¢◊ñ◊®◊î ◊ñ◊ï',
        'today': '◊î◊ô◊ï◊ù',
        'tomorrow': '◊û◊ó◊®',
        'day_after_tomorrow': '◊û◊ó◊®◊™◊ô◊ô◊ù'
    }
}

# –ù–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
WEEKDAY_NAMES = {
    'ru': ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'],
    'en': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
    'he': ['◊ô◊ï◊ù ◊©◊†◊ô', '◊ô◊ï◊ù ◊©◊ú◊ô◊©◊ô', '◊ô◊ï◊ù ◊®◊ë◊ô◊¢◊ô', '◊ô◊ï◊ù ◊ó◊û◊ô◊©◊ô', '◊ô◊ï◊ù ◊©◊ô◊©◊ô', '◊©◊ë◊™', '◊ô◊ï◊ù ◊®◊ê◊©◊ï◊ü']
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db = Database()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
user_states = {}


def email_to_telegram_id(email_address: str) -> int:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π telegram_id –∏–∑ email"""
    hash_object = hashlib.sha256(email_address.lower().encode())
    hex_dig = hash_object.hexdigest()
    return -int(hex_dig[:15], 16)


def get_next_three_days():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç—Ä—ë—Ö –¥–Ω–µ–π (–ø—Ä–æ–ø—É—Å–∫ –ø—è—Ç–Ω–∏—Ü—ã –∏ —Å—É–±–±–æ—Ç—ã)"""
    days = []
    current = datetime.now()
    
    while len(days) < 3:
        day_of_week = current.weekday()
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—è—Ç–Ω–∏—Ü—É (4) –∏ —Å—É–±–±–æ—Ç—É (5)
        if day_of_week not in [4, 5]:
            days.append(current)
        current += timedelta(days=1)
    
    return days


def format_date(date):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã DD.MM.YYYY"""
    return date.strftime('%d.%m.%Y')


def format_date_for_db(date):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –ë–î YYYY-MM-DD"""
    return date.strftime('%Y-%m-%d')


def get_weekday_name(date, language):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    day_index = date.weekday()
    return WEEKDAY_NAMES[language][day_index]


class EmailBot:
    """Email-–±–æ—Ç —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
    
    def __init__(self):
        self.imap_host = IMAP_HOST
        self.imap_port = IMAP_PORT
        self.imap_user = IMAP_USER
        self.imap_password = IMAP_PASSWORD
        self.processed_emails = set()
    
    def is_configured(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ IMAP"""
        return bool(self.imap_user and self.imap_password)
    
    def connect_imap(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            logger.info(f"[EMAIL] Connecting to IMAP: {self.imap_host}:{self.imap_port}")
            mail = imaplib.IMAP4_SSL(self.imap_host, self.imap_port)
            mail.login(self.imap_user, self.imap_password)
            logger.info("[EMAIL] IMAP connection successful")
            return mail
        except Exception as e:
            logger.error(f"[EMAIL] Failed to connect to IMAP: {e}")
            return None
    
    def get_email_body(self, msg) -> str:
        """–ò–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞"""
        body = ""
        
        if msg.is_multipart():
            for part in msg.walk():
                content_type = part.get_content_type()
                if content_type == "text/plain":
                    try:
                        body = part.get_payload(decode=True).decode()
                        break
                    except:
                        pass
        else:
            try:
                body = msg.get_payload(decode=True).decode()
            except:
                pass
        
        return body.strip()
    
    def parse_command(self, text: str) -> Optional[str]:
        """–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ–∫—Å—Ç–µ –ø–∏—Å—å–º–∞"""
        if not text:
            return None
        
        logger.info(f"[EMAIL] Raw text: {repr(text[:200])}")
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        lines = text.strip().split('\n')
        first_line = ''
        for line in lines:
            clean_line = line.strip()
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, —Ü–∏—Ç–∞—Ç—ã (>), —Å–ª—É–∂–µ–±–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if clean_line and not clean_line.startswith('>') and not clean_line.startswith('On ') and not clean_line.startswith('It looks like'):
                first_line = clean_line
                break
        
        if not first_line:
            return None
        
        logger.info(f"[EMAIL] First line: {repr(first_line)}")
        
        # –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤
        first_line = re.sub(r'^[‚Ä¢\-\*\+]\s+', '', first_line)
        # –£–¥–∞–ª—è–µ–º —Å–∫–æ–±–∫–∏ —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
        first_line = re.sub(r'\s*\(.*?\)\s*', ' ', first_line).strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≤—Ä–∏—Ç –î–û lowercase
        if '◊¢◊ë◊®◊ô◊™' in first_line:
            logger.info("[EMAIL] Command: lang_he (Hebrew detected)")
            return 'lang_he'
        
        # Lowercase –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        command = first_line.lower().strip()
        
        logger.info(f"[EMAIL] Cleaned command: {repr(command)}")
        
        # START - —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if command == 'start' or command == '—Å—Ç–∞—Ä—Ç':
            logger.info("[EMAIL] Command: start")
            return 'start'
        
        # –î–∞—Ç—ã - –¢–û–õ–¨–ö–û —Ü–∏—Ñ—Ä—ã
        if command in ['1', '2', '3']:
            logger.info(f"[EMAIL] Command: date/menu_{command}")
            return command  # –í–µ—Ä–Ω–µ–º –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—É, –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
        
        # –ü—É–Ω–∫—Ç—ã –º–µ–Ω—é 4-6
        if command in ['4', '5', '6']:
            logger.info(f"[EMAIL] Command: menu_{command}")
            return command
        
        # –Ø–∑—ã–∫–∏ - –¢–û–ß–ù–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if command in ['ru', 'russian', '—Ä—É—Å—Å–∫–∏–π']:
            logger.info("[EMAIL] Command: lang_ru")
            return 'lang_ru'
        if command in ['en', 'english', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π']:
            logger.info("[EMAIL] Command: lang_en")
            return 'lang_en'
        if command in ['he', 'hebrew', '–∏–≤—Ä–∏—Ç']:
            logger.info("[EMAIL] Command: lang_he")
            return 'lang_he'
        
        # MENU –∏ HELP
        if 'menu' in command or '–º–µ–Ω—é' in command or '◊™◊§◊®◊ô◊ò' in first_line:
            logger.info("[EMAIL] Command: menu")
            return 'menu'
        if 'help' in command or '–ø–æ–º–æ—â—å' in command or '◊¢◊ñ◊®◊î' in first_line:
            logger.info("[EMAIL] Command: help")
            return 'help'
        
        logger.warning(f"[EMAIL] Command not recognized: {repr(command)}")
        return None
    
    def get_user_by_email(self, email_address: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email"""
        telegram_id = email_to_telegram_id(email_address)
        return db.get_user(telegram_id)
    
    def get_dates_message(self, language: str) -> str:
        """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–∞–º–∏"""
        dates = get_next_three_days()
        texts = TEXTS[language]
        relative = [texts['today'], texts['tomorrow'], texts['day_after_tomorrow']]
        emojis = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£']
        
        message = texts['greeting'] + '\n\n' + texts['choose_date'] + '\n\n'
        
        for i, date in enumerate(dates):
            weekday = get_weekday_name(date, language)
            formatted = format_date(date)
            count = db.get_participants_count_by_date(format_date_for_db(date))
            message += f"{emojis[i]} {relative[i]} ({weekday}) - {formatted} ({count}/{MAX_PARTICIPANTS_PER_DATE})\n"
        
        message += "\n–û—Ç–≤–µ—Ç—å—Ç–µ —Ü–∏—Ñ—Ä–æ–π (1, 2 –∏–ª–∏ 3)" if language == 'ru' else "\nReply with number (1, 2, or 3)" if language == 'en' else "\n(3 ,2 ,1) ◊¢◊†◊î ◊ë◊û◊°◊§◊®"
        
        return message
    
    def send_email(self, to_email: str, subject: str, body: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å email"""
        email_sender.send_email(to_email, subject, body)
        logger.info(f"[EMAIL] Sent email to {to_email}: {subject}")
    
    def process_email_command(self, from_email: str, body: str, subject: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏–∑ email"""
        telegram_id = email_to_telegram_id(from_email)
        user = self.get_user_by_email(from_email)
        state = user_states.get(from_email, {'step': 'start'})
        command = self.parse_command(body)
        
        logger.info(f"[EMAIL] From: {from_email}, Command: {command}, State: {state['step']}, User exists: {bool(user)}")
        
        if not command:
            # –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É
            texts = TEXTS[user['language'] if user else 'ru']
            self.send_email(from_email, "üìñ Help / –°–ø—Ä–∞–≤–∫–∞", texts['help'])
            return
        
        # –ö–æ–º–∞–Ω–¥–∞ START
        if command == 'start':
            if user:
                # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                texts = TEXTS[user['language']]
                menu_text = texts['main_menu']
                self.send_email(from_email, "üì± Menu / –ú–µ–Ω—é", menu_text)
                user_states[from_email] = {'step': 'registered', 'language': user['language']}
            else:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
                self.send_email(from_email, "üïäÔ∏è Welcome / –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", TEXTS['ru']['welcome'])
                user_states[from_email] = {'step': 'choosing_language'}
            return
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏ —ç—Ç–æ –Ω–µ START - –ø–æ–∫–∞–∑–∞—Ç—å welcome
        if not user and state['step'] == 'start':
            self.send_email(from_email, "üïäÔ∏è Welcome / –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", TEXTS['ru']['welcome'])
            user_states[from_email] = {'step': 'choosing_language'}
            return
        
        # –í—ã–±–æ—Ä —è–∑—ã–∫–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Ü–∏—Ñ—Ä—ã (1,2,3) –∏ —Å–ª–æ–≤–∞ (lang_ru, ru, russian)
        if state['step'] == 'choosing_language':
            language = None
            
            # –¶–∏—Ñ—Ä—ã: 1=ru, 2=en, 3=he
            if command == '1':
                language = 'ru'
            elif command == '2':
                language = 'en'
            elif command == '3':
                language = 'he'
            # –ö–æ–º–∞–Ω–¥—ã lang_*
            elif command.startswith('lang_'):
                language = command.split('_')[1]
            
            if language:
                logger.info(f"[EMAIL] Language selected: {language}")
            
            if language:
                if not user:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    first_name = from_email.split('@')[0]
                    participant_id, activation_code = db.create_user(
                        telegram_id=telegram_id,
                        username=from_email,
                        first_name=first_name,
                        participant_type='email_participant',
                        language=language
                    )
                    db.update_user_email(telegram_id, from_email)
                    user = db.get_user(telegram_id)
                    logger.info(f"[EMAIL] User created: ID={participant_id}, Code={activation_code}")
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    db.set_user_language(telegram_id, language)
                    db.update_user_email(telegram_id, from_email)
                    user = db.get_user(telegram_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞—Ç
                dates_message = self.get_dates_message(language)
                subject_map = {
                    'ru': '‚ú°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                    'en': '‚ú°Ô∏è Welcome!',
                    'he': '‚ú°Ô∏è ◊ë◊®◊ï◊õ◊ô◊ù ◊î◊ë◊ê◊ô◊ù!'
                }
                self.send_email(from_email, subject_map[language], dates_message)
                user_states[from_email] = {'step': 'choosing_date', 'language': language}
                return
            else:
                # –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ —è–∑—ã–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º help
                texts = TEXTS['ru']
                self.send_email(from_email, "üìñ Help / –°–ø—Ä–∞–≤–∫–∞", texts['help'])
                return
        
        # –í—ã–±–æ—Ä –¥–∞—Ç—ã
        if state['step'] == 'choosing_date' and command in ['1', '2', '3']:
            if not user:
                self.send_email(from_email, "üïäÔ∏è Welcome", TEXTS['ru']['welcome'])
                user_states[from_email] = {'step': 'choosing_language'}
                return
            
            date_index = int(command) - 1
            dates = get_next_three_days()
            
            if 0 <= date_index < len(dates):
                selected_date = format_date_for_db(dates[date_index])
                count = db.get_participants_count_by_date(selected_date)
                
                texts = TEXTS[user['language']]
                
                if count >= MAX_PARTICIPANTS_PER_DATE:
                    # –î–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
                    full_message = texts['date_full'] + "\n\n" + self.get_dates_message(user['language'])
                    self.send_email(from_email, "‚ùå Date full / –î–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞", full_message)
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
                db.update_zoom_date(telegram_id, selected_date)
                user = db.get_user(telegram_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å ID –∏ –∫–æ–¥–æ–º
                confirmation = texts['meeting_confirmed'] + "\n\n" + texts['id_and_code'].replace('{participant_id}', str(user['participant_id'])).replace('{activation_code}', user['activation_code'])
                subject_map = {
                    'ru': 'üé´ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!',
                    'en': 'üé´ Registration confirmed!',
                    'he': 'üé´ !◊î◊®◊ô◊©◊ï◊ù ◊ê◊ï◊©◊®'
                }
                self.send_email(from_email, subject_map[user['language']], confirmation)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
                menu_text = texts['main_menu']
                self.send_email(from_email, "üì± Menu / –ú–µ–Ω—é", menu_text)
                
                user_states[from_email] = {'step': 'registered', 'language': user['language']}
                logger.info(f"[EMAIL] Date selected: {selected_date}")
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é (–ø—É–Ω–∫—Ç—ã 1-6) - —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        if user and state['step'] == 'registered' and command in ['1', '2', '3', '4', '5', '6']:
            texts = TEXTS[user['language']]
            menu_choice = int(command)
            
            if menu_choice == 1:
                # –ù–∞–ø–æ–º–Ω–∏—Ç—å ID
                text = texts['your_id'].replace('{participant_id}', str(user['participant_id']))
                self.send_email(from_email, "üìú Your ID", text)
                logger.info(f"[EMAIL] Reminded ID")
                return
            
            if menu_choice == 2:
                # –ù–∞–ø–æ–º–Ω–∏—Ç—å –∫–æ–¥
                text = texts['your_code'].replace('{activation_code}', user['activation_code'])
                self.send_email(from_email, "üîë Activation code / –ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", text)
                logger.info(f"[EMAIL] Reminded activation code")
                return
            
            if menu_choice == 3:
                # –ù–∞–ø–æ–º–Ω–∏—Ç—å –¥–∞—Ç—É
                date_text = format_date(datetime.strptime(user['zoom_date'], '%Y-%m-%d')) if user.get('zoom_date') else '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'
                text = texts['your_date'].replace('{zoom_date}', date_text)
                self.send_email(from_email, "üìÖ Meeting date / –î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏", text)
                logger.info(f"[EMAIL] Reminded meeting date")
                return
            
            if menu_choice == 4:
                # –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É
                dates_message = self.get_dates_message(user['language'])
                subject_map = {
                    'ru': 'üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É',
                    'en': 'üìÖ Choose new date',
                    'he': 'üìÖ ◊ë◊ó◊® ◊™◊ê◊®◊ô◊ö ◊ó◊ì◊©'
                }
                self.send_email(from_email, subject_map[user['language']], dates_message)
                user_states[from_email] = {'step': 'choosing_date', 'language': user['language']}
                logger.info(f"[EMAIL] Rescheduling meeting")
                return
            
            if menu_choice == 5:
                # –ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ID
                self.send_email(from_email, "‚ùì How to activate / –ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", texts['how_to_activate'])
                logger.info(f"[EMAIL] Showed activation info")
                return
            
            if menu_choice == 6:
                # –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
                self.send_email(from_email, "üåç Change language / –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", TEXTS['ru']['welcome'])
                user_states[from_email] = {'step': 'choosing_language'}
                logger.info(f"[EMAIL] Changing language")
                return
        
        # –ö–æ–º–∞–Ω–¥–∞ MENU
        if command == 'menu':
            if user:
                texts = TEXTS[user['language']]
                self.send_email(from_email, "üì± Menu / –ú–µ–Ω—é", texts['main_menu'])
                user_states[from_email] = {'step': 'registered', 'language': user['language']}
            else:
                self.send_email(from_email, "üïäÔ∏è Welcome", TEXTS['ru']['welcome'])
                user_states[from_email] = {'step': 'choosing_language'}
            return
        
        # –ö–æ–º–∞–Ω–¥–∞ HELP
        if command == 'help':
            texts = TEXTS[user['language'] if user else 'ru']
            self.send_email(from_email, "üìñ Help / –°–ø—Ä–∞–≤–∫–∞", texts['help'])
            return
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏
        texts = TEXTS[user['language'] if user else 'ru']
        self.send_email(from_email, "üìñ Help / –°–ø—Ä–∞–≤–∫–∞", texts['help'])
    
    def process_incoming_emails(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º"""
        if not self.is_configured():
            logger.warning("[EMAIL] IMAP not configured")
            return
        
        mail = self.connect_imap()
        if not mail:
            return
        
        try:
            mail.select('INBOX')
            logger.info("[EMAIL] Connected to INBOX, checking for emails...")
            
            status, messages = mail.search(None, 'UNSEEN')
            
            if status != 'OK':
                logger.warning(f"[EMAIL] Search failed: {status}")
                return
            
            email_ids = messages[0].split()
            
            if not email_ids:
                logger.info("[EMAIL] No new emails")
                return
            
            logger.info(f"[EMAIL] Found {len(email_ids)} new emails")
            
            for email_id in email_ids:
                try:
                    status, msg_data = mail.fetch(email_id, '(RFC822)')
                    
                    if status != 'OK':
                        continue
                    
                    for response_part in msg_data:
                        if isinstance(response_part, tuple):
                            msg = email.message_from_bytes(response_part[1])
                            
                            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                            from_email = msg.get('From', '')
                            if '<' in from_email:
                                from_email = from_email.split('<')[1].split('>')[0]
                            
                            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É
                            subject = msg.get('Subject', '')
                            if subject:
                                decoded = decode_header(subject)[0]
                                if isinstance(decoded[0], bytes):
                                    subject = decoded[0].decode(decoded[1] or 'utf-8')
                                else:
                                    subject = decoded[0]
                            
                            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
                            body = self.get_email_body(msg)
                            
                            if not body:
                                continue
                            
                            logger.info(f"[EMAIL] Processing email from {from_email}")
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
                            self.process_email_command(from_email, body, subject)
                            
                except Exception as e:
                    logger.error(f"[EMAIL] Error processing email: {e}")
                    continue
            
        except Exception as e:
            logger.error(f"[EMAIL] Error in process_incoming_emails: {e}")
        finally:
            try:
                mail.close()
                mail.logout()
            except:
                pass
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("[EMAIL] Email bot started")
        
        while True:
            try:
                self.process_incoming_emails()
            except Exception as e:
                logger.error(f"[EMAIL] Error in email bot: {e}")
            
            time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥


def start_email_bot():
    """–ó–∞–ø—É—Å–∫ Email –±–æ—Ç–∞"""
    bot = EmailBot()
    if not bot.is_configured():
        logger.warning("[EMAIL] Email bot not configured - skipping")
        return
    
    logger.info("[EMAIL] Starting Email bot...")
    bot.run()


if __name__ == "__main__":
    start_email_bot()
