"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞
"""

import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import admin
from database import Database

db = Database()

# –í–ê–ñ–ù–û: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID (–ø–æ–ª—É—á–∏—Ç–µ –æ—Ç @userinfobot)
ADMIN_IDS = [
    386965305,  # –í–∞—à ID
]

# –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
if os.getenv("ADMIN_TELEGRAM_ID"):
    try:
        ADMIN_IDS.append(int(os.getenv("ADMIN_TELEGRAM_ID")))
    except:
        pass


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in ADMIN_IDS


async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin - –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    text = admin.format_statistics_message()
    
    keyboard = [
        [InlineKeyboardButton("üìÖ –ü–æ –¥–∞—Ç–∞–º", callback_data="admin_dates")],
        [InlineKeyboardButton("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ", callback_data="admin_recent")],
        [InlineKeyboardButton("üìä CSV —ç–∫—Å–ø–æ—Ä—Ç", callback_data="admin_export")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )


async def admin_dates_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    if not is_admin(user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    dates = admin.get_all_dates_with_participants()
    
    if not dates:
        await query.edit_message_text("üìÖ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –≤—Å—Ç—Ä–µ—á–∏.")
        return
    
    keyboard = []
    for date in dates:
        participants_count = len(admin.get_participants_by_date(date))
        from datetime import datetime
        date_obj = datetime.strptime(date, "%Y-%m-%d")
        formatted = date_obj.strftime("%d.%m.%Y")
        
        keyboard.append([
            InlineKeyboardButton(
                f"{formatted} ({participants_count} —á–µ–ª.)",
                callback_data=f"admin_date_{date}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:",
        reply_markup=reply_markup
    )


async def admin_date_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ –¥–∞—Ç–µ"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    if not is_admin(user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    date = query.data.replace("admin_date_", "")
    text = admin.format_participants_by_date(date)
    
    keyboard = [
        [InlineKeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –≤—Å–µ–º", callback_data=f"admin_send_{date}")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º", callback_data="admin_dates")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è 4096 —Å–∏–º–≤–æ–ª–∞–º–∏
    if len(text) > 4000:
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
        for i, part in enumerate(parts):
            if i == len(parts) - 1:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await query.message.reply_text(part, parse_mode='Markdown', reply_markup=reply_markup)
            else:
                await query.message.reply_text(part, parse_mode='Markdown')
        await query.edit_message_text("üìÑ –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–∞—Å—Ç—è–º–∏ ‚Üì")
    else:
        await query.edit_message_text(text, parse_mode='Markdown', reply_markup=reply_markup)


async def admin_recent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    if not is_admin(user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    text = admin.format_recent_registrations(20)
    
    keyboard = [
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, parse_mode='Markdown', reply_markup=reply_markup)


async def admin_export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ CSV"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    if not is_admin(user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    csv_data = admin.export_to_csv()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    filename = f"participants_{admin.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    with open(filename, 'w', encoding='utf-8-sig') as f:  # utf-8-sig –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ Excel
        f.write(csv_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    with open(filename, 'rb') as f:
        await query.message.reply_document(
            document=f,
            filename=filename,
            caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ CSV"
        )
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        os.remove(filename)
    except:
        pass
    
    await query.edit_message_text("‚úÖ CSV —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")


async def admin_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    if not is_admin(user.id):
        return
    
    text = admin.format_statistics_message()
    
    keyboard = [
        [InlineKeyboardButton("üìÖ –ü–æ –¥–∞—Ç–∞–º", callback_data="admin_dates")],
        [InlineKeyboardButton("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ", callback_data="admin_recent")],
        [InlineKeyboardButton("üìä CSV —ç–∫—Å–ø–æ—Ä—Ç", callback_data="admin_export")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )


async def admin_send_zoom_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Zoom"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    if not is_admin(user.id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    date = query.data.replace("admin_send_", "")
    participants = admin.get_participants_by_date(date)
    
    from datetime import datetime
    date_obj = datetime.strptime(date, "%Y-%m-%d")
    formatted = date_obj.strftime("%d.%m.%Y")
    
    text = f"üì® **–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ Zoom**\n\n"
    text += f"–î–∞—Ç–∞: {formatted}\n"
    text += f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}\n\n"
    text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
    text += f"`/sendlink {date} –í–ê–®–ê_–°–°–´–õ–ö–ê_–ù–ê_ZOOM`\n\n"
    text += "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
    text += f"`/sendlink {date} https://zoom.us/j/123456789`"
    
    await query.edit_message_text(text, parse_mode='Markdown')


async def admin_sendlink_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ Zoom –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –¥–∞—Ç—ã
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sendlink 2025-10-10 https://zoom.us/j/123456789
    """
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "`/sendlink YYYY-MM-DD —Å—Å—ã–ª–∫–∞_–Ω–∞_zoom`\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "`/sendlink 2025-10-10 https://zoom.us/j/123456789`",
            parse_mode='Markdown'
        )
        return
    
    date = context.args[0]
    zoom_link = context.args[1]
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participants = admin.get_participants_by_date(date)
    
    if not participants:
        await update.message.reply_text(f"‚ùå –ù–∞ {date} –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    
    from datetime import datetime
    try:
        date_obj = datetime.strptime(date, "%Y-%m-%d")
        formatted = date_obj.strftime("%d.%m.%Y")
    except:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await update.message.reply_text(
        f"üì® –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å—Å—ã–ª–∫–∏ –Ω–∞ Zoom:\n\n"
        f"–î–∞—Ç–∞: {formatted}\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}\n"
        f"–°—Å—ã–ª–∫–∞: {zoom_link}\n\n"
        f"‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞..."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
    success = 0
    failed = 0
    
    for p in participants:
        try:
            lang = p.get('language', 'ru')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —è–∑—ã–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            if lang == 'ru':
                message = (
                    f"üé• **–°—Å—ã–ª–∫–∞ –Ω–∞ Zoom-–≤—Å—Ç—Ä–µ—á—É**\n\n"
                    f"–î–∞—Ç–∞: {formatted}\n"
                    f"–í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: ‚Ññ{p['certificate_number']}\n\n"
                    f"–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n{zoom_link}\n\n"
                    f"‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –≤–æ–≤—Ä–µ–º—è!\n"
                    f"–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ."
                )
            elif lang == 'en':
                message = (
                    f"üé• **Zoom Meeting Link**\n\n"
                    f"Date: {formatted}\n"
                    f"Your certificate: ‚Ññ{p['certificate_number']}\n\n"
                    f"Join link:\n{zoom_link}\n\n"
                    f"‚è∞ Please join on time!\n"
                    f"Meeting attendance is required for certificate activation."
                )
            else:  # he
                message = (
                    f"üé• **◊ß◊ô◊©◊ï◊® ◊ú◊§◊í◊ô◊©◊™ Zoom**\n\n"
                    f"◊™◊ê◊®◊ô◊ö: {formatted}\n"
                    f"◊î◊™◊¢◊ï◊ì◊î ◊©◊ú◊ö: ‚Ññ{p['certificate_number']}\n\n"
                    f"◊ß◊ô◊©◊ï◊® ◊ú◊î◊¶◊ò◊®◊§◊ï◊™:\n{zoom_link}\n\n"
                    f"‚è∞ ◊ê◊†◊ê ◊î◊¶◊ò◊®◊£ ◊ë◊ñ◊û◊ü!\n"
                    f"◊†◊ï◊õ◊ó◊ï◊™ ◊ë◊§◊í◊ô◊©◊î ◊†◊ì◊®◊©◊™ ◊ú◊î◊§◊¢◊ú◊™ ◊î◊™◊¢◊ï◊ì◊î."
                )
            
            await context.bot.send_message(
                chat_id=p['telegram_id'],
                text=message,
                parse_mode='Markdown'
            )
            success += 1
            
        except Exception as e:
            failed += 1
            print(f"Failed to send to {p['telegram_id']}: {e}")
    
    # –û—Ç—á–µ—Ç
    await update.message.reply_text(
        f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        f"–£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"–û—à–∏–±–æ–∫: {failed}\n"
        f"–í—Å–µ–≥–æ: {len(participants)}",
        parse_mode='Markdown'
    )


async def admin_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /info TELEGRAM_ID
    """
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    if len(context.args) < 1:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/info TELEGRAM_ID`",
            parse_mode='Markdown'
        )
        return
    
    try:
        telegram_id = int(context.args[0])
    except:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
        return
    
    text = admin.get_participant_info(telegram_id)
    await update.message.reply_text(text, parse_mode='Markdown')


async def admin_mark_attended_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /attended TELEGRAM_ID
    """
    user = update.effective_user
    
    if not is_admin(user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    if len(context.args) < 1:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/attended TELEGRAM_ID`",
            parse_mode='Markdown'
        )
        return
    
    try:
        telegram_id = int(context.args[0])
    except:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
        return
    
    if admin.mark_user_attended(telegram_id):
        await update.message.reply_text(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {telegram_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ—Å–µ—Ç–∏–≤—à–∏–π –≤—Å—Ç—Ä–µ—á—É")
    else:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {telegram_id}")
