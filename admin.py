"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –±–æ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–º–º–∏—Ç
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, —Ä–∞—Å—Å—ã–ª–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ Zoom
"""

from datetime import datetime
from typing import List, Dict
from database import Database

db = Database()


def get_statistics() -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    participants = db.get_all_participants()
    
    stats = {
        'total': len(participants),
        'individual': 0,
        'organization': 0,
        'with_qr': 0,
        'languages': {'ru': 0, 'en': 0, 'he': 0, 'unknown': 0},
        'by_date': {},
        'zoom_attended': 0
    }
    
    for p in participants:
        # –¢–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–∞
        if p['participant_type'] == 'individual':
            stats['individual'] += 1
        elif p['participant_type'] == 'organization':
            stats['organization'] += 1
        
        # QR-–∫–æ–¥
        if p['qr_code_path']:
            stats['with_qr'] += 1
        
        # –Ø–∑—ã–∫
        lang = p.get('language', 'unknown')
        if lang in stats['languages']:
            stats['languages'][lang] += 1
        else:
            stats['languages']['unknown'] += 1
        
        # –ü–æ –¥–∞—Ç–∞–º Zoom
        zoom_date = p.get('zoom_date')
        if zoom_date:
            if zoom_date not in stats['by_date']:
                stats['by_date'][zoom_date] = {
                    'total': 0,
                    'ru': 0,
                    'en': 0,
                    'he': 0,
                    'individual': 0,
                    'organization': 0
                }
            stats['by_date'][zoom_date]['total'] += 1
            stats['by_date'][zoom_date][lang] += 1
            stats['by_date'][zoom_date][p['participant_type']] += 1
        
        # –ü–æ—Å–µ—â–µ–Ω–∏–µ Zoom
        if p.get('zoom_attended') == 1:
            stats['zoom_attended'] += 1
    
    return stats


def format_statistics_message() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    stats = get_statistics()
    
    text = "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ô**\n\n"
    text += f"üë• **–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {stats['total']}\n"
    text += f"   ‚Ä¢ –ß–∞—Å—Ç–Ω—ã–µ –ª–∏—Ü–∞: {stats['individual']}\n"
    text += f"   ‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {stats['organization']}\n\n"
    
    text += f"üì≤ **–ü–æ–ª—É—á–∏–ª–∏ QR-–∫–æ–¥:** {stats['with_qr']}\n\n"
    
    text += "üåç **–ü–æ —è–∑—ã–∫–∞–º:**\n"
    text += f"   üá∑üá∫ –†—É—Å—Å–∫–∏–π: {stats['languages']['ru']}\n"
    text += f"   üá¨üáß English: {stats['languages']['en']}\n"
    text += f"   üáÆüá± ◊¢◊ë◊®◊ô◊™: {stats['languages']['he']}\n\n"
    
    text += f"‚úÖ **–ü–æ—Å–µ—Ç–∏–ª–∏ Zoom:** {stats['zoom_attended']}\n\n"
    
    text += "üìÖ **–ü–æ –¥–∞—Ç–∞–º Zoom-–≤—Å—Ç—Ä–µ—á:**\n"
    if stats['by_date']:
        for date, data in sorted(stats['by_date'].items()):
            date_obj = datetime.strptime(date, "%Y-%m-%d")
            formatted = date_obj.strftime("%d.%m.%Y")
            text += f"\n**{formatted}:**\n"
            text += f"   –í—Å–µ–≥–æ: {data['total']} —á–µ–ª.\n"
            text += f"   üá∑üá∫ –†—É—Å—Å–∫–∏–π: {data['ru']} | üá¨üáß English: {data['en']} | üáÆüá± ◊¢◊ë◊®◊ô◊™: {data['he']}\n"
            text += f"   üë§ –ß–∞—Å—Ç–Ω—ã–µ: {data['individual']} | üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {data['organization']}\n"
    else:
        text += "   –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π\n"
    
    return text


def get_participants_by_date(zoom_date: str) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –¥–∞—Ç–µ Zoom-–≤—Å—Ç—Ä–µ—á–∏"""
    participants = db.get_all_participants()
    return [p for p in participants if p.get('zoom_date') == zoom_date]


def format_participants_by_date(zoom_date: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –¥–∞—Ç–µ"""
    participants = get_participants_by_date(zoom_date)
    
    if not participants:
        return f"–ù–∞ {zoom_date} –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
    
    date_obj = datetime.strptime(zoom_date, "%Y-%m-%d")
    formatted = date_obj.strftime("%d.%m.%Y")
    
    text = f"üìÖ **–£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–∞ {formatted}:**\n\n"
    text += f"–í—Å–µ–≥–æ: {len(participants)} —á–µ–ª.\n\n"
    
    for p in participants:
        lang_flag = {'ru': 'üá∑üá∫', 'en': 'üá¨üáß', 'he': 'üáÆüá±'}.get(p.get('language', 'ru'), 'üåê')
        type_emoji = 'üë§' if p['participant_type'] == 'individual' else 'üè¢'
        
        text += f"{type_emoji} {lang_flag} **{p['first_name']}**"
        if p.get('username'):
            text += f" (@{p['username']})"
        text += f"\n   üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: ‚Ññ{p['certificate_number']}\n"
        text += f"   üÜî ID: `{p['telegram_id']}`\n\n"
    
    return text


def get_all_dates_with_participants() -> List[str]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏"""
    participants = db.get_all_participants()
    dates = set()
    for p in participants:
        if p.get('zoom_date'):
            dates.add(p['zoom_date'])
    return sorted(list(dates))


def export_to_csv() -> str:
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–æ—Ä–º–∞—Ç"""
    participants = db.get_all_participants()
    
    csv = "ID,Telegram_ID,Username,First_Name,Type,Certificate,Zoom_Date,Language,Registration_Date,Attended\n"
    
    for p in participants:
        csv += f"{p['id']},"
        csv += f"{p['telegram_id']},"
        csv += f"{p.get('username', '')},"
        csv += f"{p.get('first_name', '')},"
        csv += f"{p.get('participant_type', '')},"
        csv += f"{p.get('certificate_number', '')},"
        csv += f"{p.get('zoom_date', '')},"
        csv += f"{p.get('language', 'ru')},"
        csv += f"{p.get('registration_date', '')},"
        csv += f"{p.get('zoom_attended', 0)}\n"
    
    return csv


def get_telegram_ids_by_date(zoom_date: str) -> List[int]:
    """–ü–æ–ª—É—á–∏—Ç—å Telegram ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –¥–∞—Ç–µ"""
    participants = get_participants_by_date(zoom_date)
    return [p['telegram_id'] for p in participants]


def mark_user_attended(telegram_id: int) -> bool:
    """–û—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–µ—Ç–∏–ª –≤—Å—Ç—Ä–µ—á—É"""
    try:
        db.mark_zoom_attended(telegram_id)
        return True
    except Exception as e:
        print(f"Error marking user attended: {e}")
        return False


def get_participant_info(telegram_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ"""
    user = db.get_user(telegram_id)
    
    if not user:
        return "–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω."
    
    lang_name = {'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'en': 'üá¨üáß English', 'he': 'üáÆüá± ◊¢◊ë◊®◊ô◊™'}.get(
        user.get('language', 'ru'), 'üåê Unknown'
    )
    type_name = '–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ' if user['participant_type'] == 'individual' else '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è'
    
    text = f"üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ**\n\n"
    text += f"**–ò–º—è:** {user.get('first_name', 'N/A')}\n"
    text += f"**Username:** @{user.get('username', '–Ω–µ—Ç')}\n"
    text += f"**Telegram ID:** `{user['telegram_id']}`\n\n"
    
    text += f"**–¢–∏–ø:** {type_name}\n"
    text += f"**–Ø–∑—ã–∫:** {lang_name}\n"
    text += f"**–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç:** ‚Ññ{user['certificate_number']}\n\n"
    
    if user.get('zoom_date'):
        date_obj = datetime.strptime(user['zoom_date'], "%Y-%m-%d")
        formatted = date_obj.strftime("%d.%m.%Y")
        text += f"**Zoom-–≤—Å—Ç—Ä–µ—á–∞:** {formatted}\n"
    else:
        text += f"**Zoom-–≤—Å—Ç—Ä–µ—á–∞:** –Ω–µ –≤—ã–±—Ä–∞–Ω–∞\n"
    
    text += f"**–ü–æ—Å–µ—Ç–∏–ª –≤—Å—Ç—Ä–µ—á—É:** {'‚úÖ –î–∞' if user.get('zoom_attended') == 1 else '‚ùå –ù–µ—Ç'}\n"
    text += f"**–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {user.get('registration_date', 'N/A')[:10]}\n"
    
    return text


def search_participants(query: str) -> List[Dict]:
    """–ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ username"""
    participants = db.get_all_participants()
    query_lower = query.lower()
    
    results = []
    for p in participants:
        if (query_lower in (p.get('first_name', '')).lower() or
            query_lower in (p.get('username', '')).lower() or
            str(p['telegram_id']) == query):
            results.append(p)
    
    return results


def get_unattended_by_date(zoom_date: str) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –ø–æ—Å–µ—Ç–∏–ª–∏ –≤—Å—Ç—Ä–µ—á—É"""
    participants = get_participants_by_date(zoom_date)
    return [p for p in participants if p.get('zoom_attended') != 1]


def get_attended_by_date(zoom_date: str) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ü–û–°–ï–¢–ò–õ–ò –≤—Å—Ç—Ä–µ—á—É"""
    participants = get_participants_by_date(zoom_date)
    return [p for p in participants if p.get('zoom_attended') == 1]


def get_participants_without_zoom_date() -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –¥–∞—Ç—ã Zoom"""
    participants = db.get_all_participants()
    return [p for p in participants if not p.get('zoom_date')]


def get_recent_registrations(limit: int = 10) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    participants = db.get_all_participants()
    # –£–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ registration_date DESC –≤ get_all_participants
    return participants[:limit]


def format_recent_registrations(limit: int = 10) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    participants = get_recent_registrations(limit)
    
    if not participants:
        return "–ù–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π."
    
    text = f"üìù **–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(participants)} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:**\n\n"
    
    for p in participants:
        lang_flag = {'ru': 'üá∑üá∫', 'en': 'üá¨üáß', 'he': 'üáÆüá±'}.get(p.get('language', 'ru'), 'üåê')
        type_emoji = 'üë§' if p['participant_type'] == 'individual' else 'üè¢'
        
        reg_date = p.get('registration_date', '')[:10]
        
        text += f"{type_emoji} {lang_flag} **{p['first_name']}**"
        if p.get('username'):
            text += f" (@{p['username']})"
        text += f"\n   üìÖ {reg_date} | üìú ‚Ññ{p['certificate_number']}\n\n"
    
    return text
