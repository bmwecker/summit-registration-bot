"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç SMTP –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º
"""

import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Optional, List
import logging

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
SMTP_HOST = os.getenv("SMTP_HOST", "smtp.gmail.com")
SMTP_PORT = int(os.getenv("SMTP_PORT", "587"))
SMTP_USER = os.getenv("SMTP_USER", "")
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD", "")
FROM_EMAIL = os.getenv("FROM_EMAIL", SMTP_USER)
FROM_NAME = os.getenv("FROM_NAME", "Aleph Bet Foresight Summit")


class EmailSender:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email"""
    
    def __init__(self):
        self.smtp_host = SMTP_HOST
        self.smtp_port = SMTP_PORT
        self.smtp_user = SMTP_USER
        self.smtp_password = SMTP_PASSWORD
        self.from_email = FROM_EMAIL
        self.from_name = FROM_NAME
    
    def is_configured(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ SMTP"""
        return bool(self.smtp_user and self.smtp_password)
    
    def send_email(
        self,
        to_email: str,
        subject: str,
        body_text: str,
        body_html: Optional[str] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ email
        
        Args:
            to_email: Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
            body_text: –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ (plain text)
            body_html: HTML –≤–µ—Ä—Å–∏—è –ø–∏—Å—å–º–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        if not self.is_configured():
            logger.warning("SMTP not configured, skipping email")
            return False
        
        try:
            # –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = MIMEMultipart('alternative')
            msg['From'] = f"{self.from_name} <{self.from_email}>"
            msg['To'] = to_email
            msg['Subject'] = subject
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é
            part1 = MIMEText(body_text, 'plain', 'utf-8')
            msg.attach(part1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º HTML –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            if body_html:
                part2 = MIMEText(body_html, 'html', 'utf-8')
                msg.attach(part2)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SMTP –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            with smtplib.SMTP(self.smtp_host, self.smtp_port) as server:
                server.starttls()
                server.login(self.smtp_user, self.smtp_password)
                server.send_message(msg)
            
            logger.info(f"Email sent successfully to {to_email}")
            return True
        
        except Exception as e:
            logger.error(f"Failed to send email to {to_email}: {e}")
            return False
    
    def send_registration_confirmation(
        self,
        to_email: str,
        first_name: str,
        participant_id: int,
        activation_code: str,
        zoom_date: str,
        language: str = 'ru'
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        
        subjects = {
            'ru': f"‚ú°Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ Aleph Bet Foresight Summit - ID ‚Ññ{participant_id}",
            'en': f"‚ú°Ô∏è Registration for Aleph Bet Foresight Summit - ID ‚Ññ{participant_id}",
            'he': f"‚ú°Ô∏è ◊®◊ô◊©◊ï◊ù ◊ú-Aleph Bet Foresight Summit - ID ‚Ññ{participant_id}"
        }
        
        texts = {
            'ru': f"""–®–∞–ª–æ–º, {first_name}!

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –Ω–∞ Aleph Bet Foresight Summit!

üé´ –í–∞—à ID: ‚Ññ{participant_id}
üîë –ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {activation_code}
üìÖ –î–∞—Ç–∞ Zoom-–≤—Å—Ç—Ä–µ—á–∏: {zoom_date}

‚ö†Ô∏è –í–ê–ñ–ù–û:
‚Ä¢ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ ID –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ Zoom-–≤—Å—Ç—Ä–µ—á–µ
‚Ä¢ –ù–∞ –≤—Å—Ç—Ä–µ—á–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ –æ–±—â–∏–π —á–∞—Ç
‚Ä¢ –ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º—É —É—á–∞—Å—Ç–∏—è –≤ —Å–∞–º–º–∏—Ç–µ

–°—Å—ã–ª–∫—É –Ω–∞ Zoom-–≤—Å—Ç—Ä–µ—á—É –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –¥–æ –Ω–∞—á–∞–ª–∞.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ Aleph Bet Foresight Summit
üïäÔ∏è
""",
            'en': f"""Shalom, {first_name}!

Congratulations on registering for Aleph Bet Foresight Summit!

üé´ Your ID: ‚Ññ{participant_id}
üîë Activation code: {activation_code}
üìÖ Zoom meeting date: {zoom_date}

‚ö†Ô∏è IMPORTANT:
‚Ä¢ To activate your ID, you must attend the Zoom meeting
‚Ä¢ At the meeting, send your activation code to the general chat
‚Ä¢ After activation, you can choose your participation format in the summit

You will receive the Zoom meeting link a few hours before it starts.

Best regards,
Aleph Bet Foresight Summit Team
üïäÔ∏è
""",
            'he': f"""◊©◊ú◊ï◊ù, {first_name}!

◊ë◊®◊õ◊ï◊™ ◊¢◊ú ◊î◊î◊®◊©◊û◊î ◊ú-Aleph Bet Foresight Summit!

üé´ ◊î-ID ◊©◊ú◊ö: ‚Ññ{participant_id}
üîë ◊ß◊ï◊ì ◊î◊§◊¢◊ú◊î: {activation_code}
üìÖ ◊™◊ê◊®◊ô◊ö ◊§◊í◊ô◊©◊™ Zoom: {zoom_date}

‚ö†Ô∏è ◊ó◊©◊ï◊ë:
‚Ä¢ ◊ú◊î◊§◊¢◊ú◊™ ◊î-ID ◊©◊ú◊ö, ◊¢◊ú◊ô◊ö ◊ú◊î◊©◊™◊™◊£ ◊ë◊§◊í◊ô◊©◊™ Zoom
‚Ä¢ ◊ë◊§◊í◊ô◊©◊î, ◊©◊ú◊ó ◊ê◊™ ◊ß◊ï◊ì ◊î◊î◊§◊¢◊ú◊î ◊©◊ú◊ö ◊ú◊¶'◊ê◊ò ◊î◊õ◊ú◊ú◊ô
‚Ä¢ ◊ú◊ê◊ó◊® ◊î◊î◊§◊¢◊ú◊î, ◊™◊ï◊õ◊ú ◊ú◊ë◊ó◊ï◊® ◊ê◊™ ◊§◊ï◊®◊û◊ò ◊î◊î◊©◊™◊™◊§◊ï◊™ ◊©◊ú◊ö ◊ë◊§◊°◊í◊î

◊™◊ß◊ë◊ú ◊ê◊™ ◊î◊ß◊ô◊©◊ï◊® ◊ú◊§◊í◊ô◊©◊™ Zoom ◊û◊°◊§◊® ◊©◊¢◊ï◊™ ◊ú◊§◊†◊ô ◊™◊ó◊ô◊ú◊™◊î.

◊ë◊ë◊®◊õ◊î,
◊¶◊ï◊ï◊™ Aleph Bet Foresight Summit
üïäÔ∏è
"""
        }
        
        subject = subjects.get(language, subjects['ru'])
        body = texts.get(language, texts['ru'])
        
        return self.send_email(to_email, subject, body)
    
    def send_zoom_link(
        self,
        to_email: str,
        first_name: str,
        zoom_link: str,
        meeting_time: str,
        activation_code: str,
        language: str = 'ru'
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Zoom-—Å—Å—ã–ª–∫–∏"""
        
        subjects = {
            'ru': "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ Zoom-–≤—Å—Ç—Ä–µ—á—É Aleph Bet Summit",
            'en': "üîó Zoom Meeting Link - Aleph Bet Summit",
            'he': "üîó ◊ß◊ô◊©◊ï◊® ◊ú◊§◊í◊ô◊©◊™ Zoom - Aleph Bet Summit"
        }
        
        texts = {
            'ru': f"""–®–∞–ª–æ–º, {first_name}!

–í–∞—à–∞ Zoom-–≤—Å—Ç—Ä–µ—á–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ!

üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É: {zoom_link}
‚è∞ –í—Ä–µ–º—è: {meeting_time}
üîë –í–∞—à –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {activation_code}

‚ö†Ô∏è –ù–ï –ó–ê–ë–£–î–¨–¢–ï:
‚Ä¢ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ({activation_code}) –≤ –æ–±—â–∏–π —á–∞—Ç –≤—Å—Ç—Ä–µ—á–∏
‚Ä¢ –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ ID

–î–æ –≤—Å—Ç—Ä–µ—á–∏!
–ö–æ–º–∞–Ω–¥–∞ Aleph Bet Foresight Summit
üïäÔ∏è
""",
            'en': f"""Shalom, {first_name}!

Your Zoom meeting will start soon!

üîó Meeting link: {zoom_link}
‚è∞ Time: {meeting_time}
üîë Your activation code: {activation_code}

‚ö†Ô∏è DON'T FORGET:
‚Ä¢ Join 5 minutes before start
‚Ä¢ Send your activation code ({activation_code}) to the general chat
‚Ä¢ This is required to activate your ID

See you there!
Aleph Bet Foresight Summit Team
üïäÔ∏è
""",
            'he': f"""◊©◊ú◊ï◊ù, {first_name}!

◊§◊í◊ô◊©◊™ ◊î-Zoom ◊©◊ú◊ö ◊™◊™◊ó◊ô◊ú ◊ë◊ß◊®◊ï◊ë!

üîó ◊ß◊ô◊©◊ï◊® ◊ú◊§◊í◊ô◊©◊î: {zoom_link}
‚è∞ ◊©◊¢◊î: {meeting_time}
üîë ◊ß◊ï◊ì ◊î◊î◊§◊¢◊ú◊î ◊©◊ú◊ö: {activation_code}

‚ö†Ô∏è ◊ê◊ú ◊™◊©◊õ◊ó:
‚Ä¢ ◊î◊¶◊ò◊®◊£ 5 ◊ì◊ß◊ï◊™ ◊ú◊§◊†◊ô ◊î◊î◊™◊ó◊ú◊î
‚Ä¢ ◊©◊ú◊ó ◊ê◊™ ◊ß◊ï◊ì ◊î◊î◊§◊¢◊ú◊î ◊©◊ú◊ö ({activation_code}) ◊ú◊¶'◊ê◊ò ◊î◊õ◊ú◊ú◊ô
‚Ä¢ ◊ñ◊î ◊†◊ì◊®◊© ◊ú◊î◊§◊¢◊ú◊™ ◊î-ID ◊©◊ú◊ö

◊†◊™◊®◊ê◊î ◊©◊ù!
◊¶◊ï◊ï◊™ Aleph Bet Foresight Summit
üïäÔ∏è
"""
        }
        
        subject = subjects.get(language, subjects['ru'])
        body = texts.get(language, texts['ru'])
        
        return self.send_email(to_email, subject, body)
    
    def send_bulk_emails(
        self,
        recipients: List[tuple],
        subject: str,
        message: str
    ) -> tuple[int, int]:
        """
        –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
        
        Args:
            recipients: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (email, first_name)
            subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
            message: –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
        
        Returns:
            (—É—Å–ø–µ—à–Ω–æ, –æ—à–∏–±–æ–∫)
        """
        success = 0
        failed = 0
        
        for email, first_name in recipients:
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            personalized_message = message.replace('{first_name}', first_name)
            
            if self.send_email(email, subject, personalized_message):
                success += 1
            else:
                failed += 1
        
        return success, failed


# –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
email_sender = EmailSender()

