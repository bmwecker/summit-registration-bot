"""
Telegram-–±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–º–º–∏—Ç
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∑–∞–ø–∏—Å—å –Ω–∞ Zoom –∏ –≤—ã–¥–∞—á—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
"""

import os
import logging
from datetime import datetime, timedelta
from typing import Dict
import qrcode
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

from database import Database

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
CHOOSING_TYPE, CHOOSING_DATE, INFO_MENU = range(3)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è QR-–∫–æ–¥–æ–≤
os.makedirs("qr_codes", exist_ok=True)


def generate_qr_code(data: str, filename: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞"""
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(data)
    qr.make(fit=True)
    
    img = qr.make_image(fill_color="black", back_color="white")
    filepath = f"qr_codes/{filename}"
    img.save(filepath)
    return filepath


def get_available_dates() -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 6 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π"""
    dates = []
    current_date = datetime.now()
    days_added = 0
    
    while days_added < 6:
        current_date += timedelta(days=1)
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ (—Å—É–±–±–æ—Ç–∞=5, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ=6)
        if current_date.weekday() < 5:
            dates.append(current_date)
            days_added += 1
    
    return dates


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ - –ø–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_user = db.get_user(user.id)
    if existing_user:
        await update.message.reply_text(
            f"‚ú°Ô∏è –®–∞–ª–æ–º, {user.first_name}!\n\n"
            f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
            f"üìú –ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: ‚Ññ{existing_user['certificate_number']}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        )
        return ConversationHandler.END
    
    keyboard = [
        [InlineKeyboardButton("üîò –Ø —Å–æ —Å–≤–æ–∏–º –Ω–∞—Ä–æ–¥–æ–º", callback_data="type_individual")],
        [InlineKeyboardButton("üîò –ù–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–æ —Å–≤–æ–∏–º –Ω–∞—Ä–æ–¥–æ–º", callback_data="type_organization")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üïäÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–∞–º–º–∏—Ç–∞!\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã:",
        reply_markup=reply_markup
    )
    
    return CHOOSING_TYPE


async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≤–º–µ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏"""
    keyboard = [
        [InlineKeyboardButton("üîò –Ø —Å–æ —Å–≤–æ–∏–º –Ω–∞—Ä–æ–¥–æ–º", callback_data="type_individual")],
        [InlineKeyboardButton("üîò –ù–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–æ —Å–≤–æ–∏–º –Ω–∞—Ä–æ–¥–æ–º", callback_data="type_organization")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
        reply_markup=reply_markup
    )
    
    return CHOOSING_TYPE


async def participant_type_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    participant_type = query.data.replace("type_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['participant_type'] = participant_type
    context.user_data['participant_type_ru'] = (
        "—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ" if participant_type == "individual" else "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    certificate_number = db.create_user(
        telegram_id=user.id,
        username=user.username or "",
        first_name=user.first_name or "",
        participant_type=participant_type
    )
    
    context.user_data['certificate_number'] = certificate_number
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if participant_type == "individual":
        greeting = (
            "‚ú°Ô∏è –®–∞–ª–æ–º! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º ‚Äî –≤—ã —Å–æ —Å–≤–æ–∏–º –Ω–∞—Ä–æ–¥–æ–º!\n\n"
            "üéâ –í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –Ω–∞ Zoom-–≤—Å—Ç—Ä–µ—á—É —Å –æ—Ä–≥–∫–æ–º–∏—Ç–µ—Ç–æ–º –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤, "
            "–≥–¥–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏.\n\n"
            "–î–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–π –¥–µ–Ω—å –≤—Å—Ç—Ä–µ—á–∏, "
            "–Ω–æ –≤–∞–∂–Ω–æ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –Ω–µ—ë –≤ —Ç–µ—á–µ–Ω–∏–µ 6 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π."
        )
    else:
        greeting = (
            "‚ú°Ô∏è –®–∞–ª–æ–º! –í–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–æ —Å–≤–æ–∏–º –Ω–∞—Ä–æ–¥–æ–º!\n\n"
            "üéâ –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∞ –Ω–∞ Zoom-–≤—Å—Ç—Ä–µ—á—É —Å –æ—Ä–≥–∫–æ–º–∏—Ç–µ—Ç–æ–º "
            "–¥–ª—è –Ω–æ–≤—ã—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π –æ–±—â–∏–Ω.\n\n"
            "–î–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–π –¥–µ–Ω—å –≤—Å—Ç—Ä–µ—á–∏ "
            "–≤ —Ç–µ—á–µ–Ω–∏–µ 6 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π."
        )
    
    await query.edit_message_text(greeting)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
    dates = get_available_dates()
    keyboard = []
    for date in dates:
        date_str = date.strftime("%d.%m.%Y (%A)")
        date_value = date.strftime("%Y-%m-%d")
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        weekday_ru = {
            'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
            'Wednesday': '–°—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
            'Friday': '–ü—è—Ç–Ω–∏—Ü–∞'
        }
        day_name = weekday_ru.get(date.strftime("%A"), date.strftime("%A"))
        display_text = date.strftime(f"%d.%m.%Y ({day_name})")
        
        keyboard.append([InlineKeyboardButton(display_text, callback_data=f"date_{date_value}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –¥–ª—è Zoom-–≤—Å—Ç—Ä–µ—á–∏:",
        reply_markup=reply_markup
    )
    
    return CHOOSING_DATE


async def date_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    date_value = query.data.replace("date_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.update_zoom_date(user.id, date_value)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
    certificate_number = context.user_data['certificate_number']
    qr_data = f"SUMMIT_CERT_{certificate_number}_{user.id}"
    qr_filename = f"cert_{certificate_number}_{user.id}.png"
    qr_path = generate_qr_code(qr_data, qr_filename)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ QR-–∫–æ–¥—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.update_qr_code(user.id, qr_path)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    date_obj = datetime.strptime(date_value, "%Y-%m-%d")
    weekday_ru = {
        0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        1: '–í—Ç–æ—Ä–Ω–∏–∫',
        2: '–°—Ä–µ–¥–∞',
        3: '–ß–µ—Ç–≤–µ—Ä–≥',
        4: '–ü—è—Ç–Ω–∏—Ü–∞'
    }
    formatted_date = date_obj.strftime(f"%d.%m.%Y ({weekday_ru[date_obj.weekday()]})")
    
    await query.edit_message_text(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—Å—Ç—Ä–µ—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ {formatted_date}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ QR-–∫–æ–¥
    with open(qr_path, 'rb') as qr_file:
        await query.message.reply_photo(
            photo=qr_file,
            caption=(
                f"üé´ –í–∞—à –Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞: ‚Ññ{certificate_number}\n"
                f"üì≤ QR-–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞\n\n"
                f"‚ö†Ô∏è –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ Zoom-–≤—Å—Ç—Ä–µ—á–µ.\n"
                f"–ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º—É —É—á–∞—Å—Ç–∏—è –≤ —Å–∞–º–º–∏—Ç–µ."
            )
        )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("üîπ –í–∏–¥—ã —É—á–∞—Å—Ç–∏—è", callback_data="info_types")],
        [InlineKeyboardButton("üîπ –û —Å–∞–º–º–∏—Ç–µ", callback_data="info_summit")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:",
        reply_markup=reply_markup
    )
    
    return INFO_MENU


async def info_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –º–µ–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "info_types":
        text = (
            "üìã *–í–∏–¥—ã —É—á–∞—Å—Ç–∏—è –≤ —Å–∞–º–º–∏—Ç–µ*\n\n"
            "1Ô∏è‚É£ *–û–Ω–ª–∞–π–Ω-—É—á–∞—Å—Ç–∏–µ (—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ)*\n"
            "   ‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –æ–Ω–ª–∞–π–Ω-—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è–º\n"
            "   ‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ –æ–±—â–∏—Ö —á–∞—Ç–∞—Ö\n"
            "   ‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞\n\n"
            "2Ô∏è‚É£ *–û—Ñ–ª–∞–π–Ω-—É—á–∞—Å—Ç–∏–µ (—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ)*\n"
            "   ‚Ä¢ –õ–∏—á–Ω–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏\n"
            "   ‚Ä¢ –í—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ–Ω–ª–∞–π–Ω-—É—á–∞—Å—Ç–∏—è\n"
            "   ‚Ä¢ Networking —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n"
            "   ‚Ä¢ –ü–∞–º—è—Ç–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏\n\n"
            "3Ô∏è‚É£ *–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ*\n"
            "   ‚Ä¢ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–π –æ–±—â–∏–Ω—ã/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\n"
            "   ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è\n"
            "   ‚Ä¢ –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
            "   ‚Ä¢ –û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã\n\n"
            "üí° –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–æ—Ä–º—ã —É—á–∞—Å—Ç–∏—è –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å "
            "–ø–æ—Å–ª–µ Zoom-–≤—Å—Ç—Ä–µ—á–∏ —Å –æ—Ä–≥–∫–æ–º–∏—Ç–µ—Ç–æ–º."
        )
    else:  # info_summit
        text = (
            "üåü *–û —Å–∞–º–º–∏—Ç–µ*\n\n"
            "–°–∞–º–º–∏—Ç ‚Äî —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π "
            "–µ–≤—Ä–µ–π—Å–∫–∏—Ö –æ–±—â–∏–Ω, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏ –≤—Å–µ—Ö, –∫—Ç–æ —Å–≤—è–∑–∞–Ω —Å–æ —Å–≤–æ–∏–º –Ω–∞—Ä–æ–¥–æ–º.\n\n"
            "*–¶–µ–ª–∏ —Å–∞–º–º–∏—Ç–∞:*\n"
            "‚Ä¢ –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –æ–±—â–∏–Ω–∞–º–∏\n"
            "‚Ä¢ –û–±–º–µ–Ω –æ–ø—ã—Ç–æ–º –∏ –ª—É—á—à–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏\n"
            "‚Ä¢ –û–±—Å—É–∂–¥–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤\n"
            "‚Ä¢ –ö—É–ª—å—Ç—É—Ä–Ω–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ\n\n"
            "*–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –≤–∞—Å?*\n"
            "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ä–µ—Å—É—Ä—Å–∞–º\n"
            "‚Ä¢ –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –µ–≤—Ä–µ–π—Å–∫–æ–π –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –í–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –æ–±—â–∏–Ω—ã\n\n"
            "üìÖ –°–∞–º–º–∏—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –µ–∂–µ–≥–æ–¥–Ω–æ –∏ —Å–æ–±–∏—Ä–∞–µ—Ç —Å–æ—Ç–Ω–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ "
            "—Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞."
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    keyboard = [
        [InlineKeyboardButton("üîπ –í–∏–¥—ã —É—á–∞—Å—Ç–∏—è", callback_data="info_types")],
        [InlineKeyboardButton("üîπ –û —Å–∞–º–º–∏—Ç–µ", callback_data="info_summit")],
        [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    
    return INFO_MENU


async def finish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        "–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ Zoom-–≤—Å—Ç—Ä–µ—á–µ –∑–∞ –¥–µ–Ω—å –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n\n"
        "–î–æ –≤—Å—Ç—Ä–µ—á–∏! üïäÔ∏è"
    )
    
    return ConversationHandler.END


async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    user = update.effective_user
    user_data = db.get_user(user.id)
    
    if not user_data:
        await update.message.reply_text(
            "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    keyboard = [
        [InlineKeyboardButton("üîπ –í–∏–¥—ã —É—á–∞—Å—Ç–∏—è", callback_data="info_types")],
        [InlineKeyboardButton("üîπ –û —Å–∞–º–º–∏—Ç–µ", callback_data="info_summit")],
        [InlineKeyboardButton("üìú –ú–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data="my_certificate")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üì± –ú–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–∞–º–º–∏—Ç–∞:",
        reply_markup=reply_markup
    )


async def show_certificate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    user_data = db.get_user(user.id)
    
    if not user_data:
        await query.edit_message_text(
            "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    qr_path = user_data['qr_code_path']
    certificate_number = user_data['certificate_number']
    zoom_date = user_data['zoom_date']
    
    date_obj = datetime.strptime(zoom_date, "%Y-%m-%d")
    weekday_ru = {
        0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        1: '–í—Ç–æ—Ä–Ω–∏–∫',
        2: '–°—Ä–µ–¥–∞',
        3: '–ß–µ—Ç–≤–µ—Ä–≥',
        4: '–ü—è—Ç–Ω–∏—Ü–∞'
    }
    formatted_date = date_obj.strftime(f"%d.%m.%Y ({weekday_ru[date_obj.weekday()]})")
    
    with open(qr_path, 'rb') as qr_file:
        await query.message.reply_photo(
            photo=qr_file,
            caption=(
                f"üé´ –í–∞—à –Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: ‚Ññ{certificate_number}\n"
                f"üìÖ –î–∞—Ç–∞ Zoom-–≤—Å—Ç—Ä–µ—á–∏: {formatted_date}\n"
                f"‚ö†Ô∏è –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ."
            )
        )


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    )
    return ConversationHandler.END


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_TYPE: [
                CallbackQueryHandler(participant_type_chosen, pattern="^type_"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_input)
            ],
            CHOOSING_DATE: [
                CallbackQueryHandler(date_chosen, pattern="^date_")
            ],
            INFO_MENU: [
                CallbackQueryHandler(finish, pattern="^finish$"),
                CallbackQueryHandler(info_menu, pattern="^info_")
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CallbackQueryHandler(show_certificate, pattern="^my_certificate$"))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
